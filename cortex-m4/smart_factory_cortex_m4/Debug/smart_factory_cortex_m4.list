
smart_factory_cortex_m4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006074  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c8  080066c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080066c8  080066c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066d0  080066d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000003fc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000046c  2000046c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f597  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002367  00000000  00000000  0002f637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  000319a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cc0  00000000  00000000  00032758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fbd  00000000  00000000  00033418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107cc  00000000  00000000  000583d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbc03  00000000  00000000  00068ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001447a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000459c  00000000  00000000  001447f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800620c 	.word	0x0800620c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800620c 	.word	0x0800620c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
 80005de:	4b7c      	ldr	r3, [pc, #496]	; (80007d0 <MX_GPIO_Init+0x20c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a7b      	ldr	r2, [pc, #492]	; (80007d0 <MX_GPIO_Init+0x20c>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b79      	ldr	r3, [pc, #484]	; (80007d0 <MX_GPIO_Init+0x20c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	4b75      	ldr	r3, [pc, #468]	; (80007d0 <MX_GPIO_Init+0x20c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a74      	ldr	r2, [pc, #464]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b72      	ldr	r3, [pc, #456]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b6e      	ldr	r3, [pc, #440]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a6d      	ldr	r2, [pc, #436]	; (80007d0 <MX_GPIO_Init+0x20c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b6b      	ldr	r3, [pc, #428]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	4b67      	ldr	r3, [pc, #412]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a66      	ldr	r2, [pc, #408]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b64      	ldr	r3, [pc, #400]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b60      	ldr	r3, [pc, #384]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a5f      	ldr	r2, [pc, #380]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b5d      	ldr	r3, [pc, #372]	; (80007d0 <MX_GPIO_Init+0x20c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b59      	ldr	r3, [pc, #356]	; (80007d0 <MX_GPIO_Init+0x20c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a58      	ldr	r2, [pc, #352]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <MX_GPIO_Init+0x20c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f244 0181 	movw	r1, #16513	; 0x4081
 8000688:	4852      	ldr	r0, [pc, #328]	; (80007d4 <MX_GPIO_Init+0x210>)
 800068a:	f001 fcbb 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	4851      	ldr	r0, [pc, #324]	; (80007d8 <MX_GPIO_Init+0x214>)
 8000694:	f001 fcb6 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4619      	mov	r1, r3
 80006ae:	484b      	ldr	r0, [pc, #300]	; (80007dc <MX_GPIO_Init+0x218>)
 80006b0:	f001 fafc 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006b4:	2332      	movs	r3, #50	; 0x32
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c0:	2303      	movs	r3, #3
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c4:	230b      	movs	r3, #11
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4843      	ldr	r0, [pc, #268]	; (80007dc <MX_GPIO_Init+0x218>)
 80006d0:	f001 faec 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006d4:	2386      	movs	r3, #134	; 0x86
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e4:	230b      	movs	r3, #11
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	483c      	ldr	r0, [pc, #240]	; (80007e0 <MX_GPIO_Init+0x21c>)
 80006f0:	f001 fadc 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	4831      	ldr	r0, [pc, #196]	; (80007d4 <MX_GPIO_Init+0x210>)
 800070e:	f001 facd 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000724:	230b      	movs	r3, #11
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	4829      	ldr	r0, [pc, #164]	; (80007d4 <MX_GPIO_Init+0x210>)
 8000730:	f001 fabc 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4823      	ldr	r0, [pc, #140]	; (80007d8 <MX_GPIO_Init+0x214>)
 800074c:	f001 faae 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	481d      	ldr	r0, [pc, #116]	; (80007d8 <MX_GPIO_Init+0x214>)
 8000764:	f001 faa2 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000768:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000776:	2303      	movs	r3, #3
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800077a:	230a      	movs	r3, #10
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	4619      	mov	r1, r3
 8000784:	4816      	ldr	r0, [pc, #88]	; (80007e0 <MX_GPIO_Init+0x21c>)
 8000786:	f001 fa91 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800078a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4810      	ldr	r0, [pc, #64]	; (80007e0 <MX_GPIO_Init+0x21c>)
 80007a0:	f001 fa84 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b6:	230b      	movs	r3, #11
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_GPIO_Init+0x214>)
 80007c2:	f001 fa73 	bl	8001cac <HAL_GPIO_Init>

}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400
 80007d8:	40021800 	.word	0x40021800
 80007dc:	40020800 	.word	0x40020800
 80007e0:	40020000 	.word	0x40020000

080007e4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	(void)HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 100);
 80007ec:	1d39      	adds	r1, r7, #4
 80007ee:	2364      	movs	r3, #100	; 0x64
 80007f0:	2201      	movs	r2, #1
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <__io_putchar+0x20>)
 80007f4:	f003 f941 	bl	8003a7a <HAL_UART_Transmit>
	return ch;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000218 	.word	0x20000218

08000808 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800080e:	f001 f837 	bl	8001880 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000812:	f000 f87b 	bl	800090c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000816:	f7ff fed5 	bl	80005c4 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800081a:	f000 fccd 	bl	80011b8 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 800081e:	f000 fafb 	bl	8000e18 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8000822:	f000 fc99 	bl	8001158 <MX_USART2_UART_Init>
	Serial3_Send_String("start main()\r\n");
 8000826:	4830      	ldr	r0, [pc, #192]	; (80008e8 <main+0xe0>)
 8000828:	f000 fddc 	bl	80013e4 <Serial3_Send_String>
	MX_TIM3_Init();
 800082c:	f000 fb7e 	bl	8000f2c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	WIFI_init();
 8000830:	f000 fe46 	bl	80014c0 <WIFI_init>
	sprintf(sendData,"["LOGID":"PASSWD"]");
 8000834:	492d      	ldr	r1, [pc, #180]	; (80008ec <main+0xe4>)
 8000836:	482e      	ldr	r0, [pc, #184]	; (80008f0 <main+0xe8>)
 8000838:	f004 fa0e 	bl	8004c58 <siprintf>
	WIFI_send(sendData);
 800083c:	482c      	ldr	r0, [pc, #176]	; (80008f0 <main+0xe8>)
 800083e:	f000 ff8d 	bl	800175c <WIFI_send>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		recvData[0] = 0;
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <main+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
		if(wifi_wait("+IPD","+IPD", 50))  //수신포멧 :  +IPD,6:hello  끝문자 0x0a
 8000848:	2232      	movs	r2, #50	; 0x32
 800084a:	492b      	ldr	r1, [pc, #172]	; (80008f8 <main+0xf0>)
 800084c:	482a      	ldr	r0, [pc, #168]	; (80008f8 <main+0xf0>)
 800084e:	f000 fef1 	bl	8001634 <wifi_wait>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d030      	beq.n	80008ba <main+0xb2>
		{
			for(int i=0;i<5;i++)
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	e02a      	b.n	80008b4 <main+0xac>
			{
				if(strncmp((char *)uart2_rxdata[i],"+IPD",4)==0)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2264      	movs	r2, #100	; 0x64
 8000862:	fb02 f303 	mul.w	r3, r2, r3
 8000866:	4a25      	ldr	r2, [pc, #148]	; (80008fc <main+0xf4>)
 8000868:	4413      	add	r3, r2
 800086a:	2204      	movs	r2, #4
 800086c:	4922      	ldr	r1, [pc, #136]	; (80008f8 <main+0xf0>)
 800086e:	4618      	mov	r0, r3
 8000870:	f004 fa1a 	bl	8004ca8 <strncmp>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d119      	bne.n	80008ae <main+0xa6>
				{
					strcpy(recvData,(char *)(uart2_rxdata[i]+8));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2264      	movs	r2, #100	; 0x64
 800087e:	fb02 f303 	mul.w	r3, r2, r3
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <main+0xf4>)
 8000884:	4413      	add	r3, r2
 8000886:	3308      	adds	r3, #8
 8000888:	4619      	mov	r1, r3
 800088a:	481a      	ldr	r0, [pc, #104]	; (80008f4 <main+0xec>)
 800088c:	f004 fa04 	bl	8004c98 <strcpy>
					recvData[strlen((char *)(uart2_rxdata[i]+8)) - 1] = 0;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2264      	movs	r2, #100	; 0x64
 8000894:	fb02 f303 	mul.w	r3, r2, r3
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <main+0xf4>)
 800089a:	4413      	add	r3, r2
 800089c:	3308      	adds	r3, #8
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fcb0 	bl	8000204 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	3b01      	subs	r3, #1
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <main+0xec>)
 80008aa:	2100      	movs	r1, #0
 80008ac:	54d1      	strb	r1, [r2, r3]
			for(int i=0;i<5;i++)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	ddd1      	ble.n	800085e <main+0x56>
				}
			}
		}

		if(rx3Flag)
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <main+0xf8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d006      	beq.n	80008d2 <main+0xca>
		{
			printf("rx3Data : %s\r\n",rx3Data);
 80008c4:	490f      	ldr	r1, [pc, #60]	; (8000904 <main+0xfc>)
 80008c6:	4810      	ldr	r0, [pc, #64]	; (8000908 <main+0x100>)
 80008c8:	f004 f938 	bl	8004b3c <iprintf>
//			Serial2_Send_String(rx3Data);
//			Serial2_Send_String("\r");
			rx3Flag = 0;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <main+0xf8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
		}
		if(recvData[0] != 0)
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <main+0xec>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0b3      	beq.n	8000842 <main+0x3a>
		{
			Serial2_Event();
 80008da:	f000 f881 	bl	80009e0 <Serial2_Event>
			recvData[0] = 0;
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <main+0xec>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
		recvData[0] = 0;
 80008e4:	e7ad      	b.n	8000842 <main+0x3a>
 80008e6:	bf00      	nop
 80008e8:	08006224 	.word	0x08006224
 80008ec:	08006234 	.word	0x08006234
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	200000c0 	.word	0x200000c0
 80008f8:	08006244 	.word	0x08006244
 80008fc:	20000260 	.word	0x20000260
 8000900:	2000019b 	.word	0x2000019b
 8000904:	200001a0 	.word	0x200001a0
 8000908:	0800624c 	.word	0x0800624c

0800090c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b094      	sub	sp, #80	; 0x50
 8000910:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0320 	add.w	r3, r7, #32
 8000916:	2230      	movs	r2, #48	; 0x30
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f004 f906 	bl	8004b2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <SystemClock_Config+0xcc>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <SystemClock_Config+0xcc>)
 800093a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093e:	6413      	str	r3, [r2, #64]	; 0x40
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <SystemClock_Config+0xcc>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <SystemClock_Config+0xd0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a21      	ldr	r2, [pc, #132]	; (80009dc <SystemClock_Config+0xd0>)
 8000956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <SystemClock_Config+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800096c:	2301      	movs	r3, #1
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000970:	2310      	movs	r3, #16
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000974:	2302      	movs	r3, #2
 8000976:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000978:	2300      	movs	r3, #0
 800097a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800097c:	2308      	movs	r3, #8
 800097e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000980:	23a8      	movs	r3, #168	; 0xa8
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000984:	2302      	movs	r3, #2
 8000986:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000988:	2307      	movs	r3, #7
 800098a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fb51 	bl	8002038 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800099c:	f000 f8ee 	bl	8000b7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a0:	230f      	movs	r3, #15
 80009a2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a4:	2302      	movs	r3, #2
 80009a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009b0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2105      	movs	r1, #5
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fdb2 	bl	8002528 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80009ca:	f000 f8d7 	bl	8000b7c <Error_Handler>
	}
}
 80009ce:	bf00      	nop
 80009d0:	3750      	adds	r7, #80	; 0x50
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <Serial2_Event>:

/* USER CODE BEGIN 4 */
void Serial2_Event()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b098      	sub	sp, #96	; 0x60
 80009e4:	af02      	add	r7, sp, #8

//  Serial3_Send_String(rx2Data);
//  Serial3_Send_String("\r\n");

  int i=0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	657b      	str	r3, [r7, #84]	; 0x54
  int num;
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80009ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	222e      	movs	r2, #46	; 0x2e
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 f890 	bl	8004b2c <memset>

  strcpy(recvBuf,recvData);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	494c      	ldr	r1, [pc, #304]	; (8000b40 <Serial2_Event+0x160>)
 8000a10:	4618      	mov	r0, r3
 8000a12:	f004 f941 	bl	8004c98 <strcpy>
//  Serial3_Send_String(recvBuf);
//  Serial3_Send_String("\n\r");
  printf("rx2Data : %s\r\n",recvBuf);
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	4619      	mov	r1, r3
 8000a1a:	484a      	ldr	r0, [pc, #296]	; (8000b44 <Serial2_Event+0x164>)
 8000a1c:	f004 f88e 	bl	8004b3c <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4949      	ldr	r1, [pc, #292]	; (8000b48 <Serial2_Event+0x168>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f004 f953 	bl	8004cd0 <strtok>
 8000a2a:	6538      	str	r0, [r7, #80]	; 0x50

  while(pToken != NULL)
 8000a2c:	e011      	b.n	8000a52 <Serial2_Event+0x72>
  {
    pArray[i] = pToken;
 8000a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	3358      	adds	r3, #88	; 0x58
 8000a34:	443b      	add	r3, r7
 8000a36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a38:	f843 2c20 	str.w	r2, [r3, #-32]
    if(++i >= ARR_CNT)
 8000a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a3e:	3301      	adds	r3, #1
 8000a40:	657b      	str	r3, [r7, #84]	; 0x54
 8000a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	dc08      	bgt.n	8000a5a <Serial2_Event+0x7a>
      break;
    pToken = strtok(NULL,"[@]");
 8000a48:	493f      	ldr	r1, [pc, #252]	; (8000b48 <Serial2_Event+0x168>)
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f004 f940 	bl	8004cd0 <strtok>
 8000a50:	6538      	str	r0, [r7, #80]	; 0x50
  while(pToken != NULL)
 8000a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1ea      	bne.n	8000a2e <Serial2_Event+0x4e>
 8000a58:	e000      	b.n	8000a5c <Serial2_Event+0x7c>
      break;
 8000a5a:	bf00      	nop
  }

  if(!strcmp(pArray[2],"SERVO"))
 8000a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a5e:	493b      	ldr	r1, [pc, #236]	; (8000b4c <Serial2_Event+0x16c>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbc5 	bl	80001f0 <strcmp>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d13a      	bne.n	8000ae2 <Serial2_Event+0x102>
  {
    if(pArray[3] != NULL)
 8000a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d005      	beq.n	8000a7e <Serial2_Event+0x9e>
      num = atoi(pArray[3]);
 8000a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 f82b 	bl	8004ad0 <atoi>
 8000a7a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000a7c:	e001      	b.n	8000a82 <Serial2_Event+0xa2>
    else
      num = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
    if(!strcmp(pArray[3],"1"))
 8000a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a84:	4932      	ldr	r1, [pc, #200]	; (8000b50 <Serial2_Event+0x170>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fbb2 	bl	80001f0 <strcmp>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d107      	bne.n	8000aa2 <Serial2_Event+0xc2>
    {
    	printf("SERVO 1 ON!!!!!!!\r\n");
 8000a92:	4830      	ldr	r0, [pc, #192]	; (8000b54 <Serial2_Event+0x174>)
 8000a94:	f004 f8d8 	bl	8004c48 <puts>
    	TIM2->CCR1 = 25;
 8000a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a9c:	2219      	movs	r2, #25
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa0:	e03b      	b.n	8000b1a <Serial2_Event+0x13a>
    }
    else if(!strcmp(pArray[3],"2"))
 8000aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000aa4:	492c      	ldr	r1, [pc, #176]	; (8000b58 <Serial2_Event+0x178>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fba2 	bl	80001f0 <strcmp>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d107      	bne.n	8000ac2 <Serial2_Event+0xe2>
    {
    	printf("SERVO 2 ON!!!!!!!\r\n");
 8000ab2:	482a      	ldr	r0, [pc, #168]	; (8000b5c <Serial2_Event+0x17c>)
 8000ab4:	f004 f8c8 	bl	8004c48 <puts>
    	TIM2->CCR1 = 75;
 8000ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abc:	224b      	movs	r2, #75	; 0x4b
 8000abe:	635a      	str	r2, [r3, #52]	; 0x34
 8000ac0:	e02b      	b.n	8000b1a <Serial2_Event+0x13a>
    }
    else if(!strcmp(pArray[3],"3"))
 8000ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ac4:	4926      	ldr	r1, [pc, #152]	; (8000b60 <Serial2_Event+0x180>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fb92 	bl	80001f0 <strcmp>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d123      	bne.n	8000b1a <Serial2_Event+0x13a>
    {
    	printf("SERVO 3 ON!!!!!!!\r\n");
 8000ad2:	4824      	ldr	r0, [pc, #144]	; (8000b64 <Serial2_Event+0x184>)
 8000ad4:	f004 f8b8 	bl	8004c48 <puts>
    	TIM2->CCR1 = 120;
 8000ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000adc:	2278      	movs	r2, #120	; 0x78
 8000ade:	635a      	str	r2, [r3, #52]	; 0x34
 8000ae0:	e01b      	b.n	8000b1a <Serial2_Event+0x13a>
    }
  }
  else if(!strncmp(pArray[2]," New conn",8))
 8000ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ae4:	2208      	movs	r2, #8
 8000ae6:	4920      	ldr	r1, [pc, #128]	; (8000b68 <Serial2_Event+0x188>)
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 f8dd 	bl	8004ca8 <strncmp>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d01f      	beq.n	8000b34 <Serial2_Event+0x154>
  {
     return;
  }
  else if(!strncmp(pArray[2]," Already log",8))
 8000af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000af6:	2208      	movs	r2, #8
 8000af8:	491c      	ldr	r1, [pc, #112]	; (8000b6c <Serial2_Event+0x18c>)
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 f8d4 	bl	8004ca8 <strncmp>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d118      	bne.n	8000b38 <Serial2_Event+0x158>
  {
      connectWiFi();
 8000b06:	f000 fd27 	bl	8001558 <connectWiFi>
      sprintf(sendData,"["LOGID":"PASSWD"]");
 8000b0a:	4919      	ldr	r1, [pc, #100]	; (8000b70 <Serial2_Event+0x190>)
 8000b0c:	4819      	ldr	r0, [pc, #100]	; (8000b74 <Serial2_Event+0x194>)
 8000b0e:	f004 f8a3 	bl	8004c58 <siprintf>
      WIFI_send(sendData);
 8000b12:	4818      	ldr	r0, [pc, #96]	; (8000b74 <Serial2_Event+0x194>)
 8000b14:	f000 fe22 	bl	800175c <WIFI_send>
      return;
 8000b18:	e00f      	b.n	8000b3a <Serial2_Event+0x15a>
  }
  else
      return;

   sprintf(sendData,"[%s]%s@%s@ON\n",pArray[0],pArray[1],pArray[2]);
 8000b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	460b      	mov	r3, r1
 8000b24:	4914      	ldr	r1, [pc, #80]	; (8000b78 <Serial2_Event+0x198>)
 8000b26:	4813      	ldr	r0, [pc, #76]	; (8000b74 <Serial2_Event+0x194>)
 8000b28:	f004 f896 	bl	8004c58 <siprintf>
   WIFI_send(sendData);
 8000b2c:	4811      	ldr	r0, [pc, #68]	; (8000b74 <Serial2_Event+0x194>)
 8000b2e:	f000 fe15 	bl	800175c <WIFI_send>
 8000b32:	e002      	b.n	8000b3a <Serial2_Event+0x15a>
     return;
 8000b34:	bf00      	nop
 8000b36:	e000      	b.n	8000b3a <Serial2_Event+0x15a>
      return;
 8000b38:	bf00      	nop
}
 8000b3a:	3758      	adds	r7, #88	; 0x58
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000c0 	.word	0x200000c0
 8000b44:	0800625c 	.word	0x0800625c
 8000b48:	0800626c 	.word	0x0800626c
 8000b4c:	08006270 	.word	0x08006270
 8000b50:	08006278 	.word	0x08006278
 8000b54:	0800627c 	.word	0x0800627c
 8000b58:	08006290 	.word	0x08006290
 8000b5c:	08006294 	.word	0x08006294
 8000b60:	080062a8 	.word	0x080062a8
 8000b64:	080062ac 	.word	0x080062ac
 8000b68:	080062c0 	.word	0x080062c0
 8000b6c:	080062cc 	.word	0x080062cc
 8000b70:	08006234 	.word	0x08006234
 8000b74:	2000008c 	.word	0x2000008c
 8000b78:	080062dc 	.word	0x080062dc

08000b7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 fe7e 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM3_IRQHandler+0x10>)
 8000c32:	f002 f87b 	bl	8002d2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000150 	.word	0x20000150

08000c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <USART2_IRQHandler+0x10>)
 8000c46:	f002 ffdb 	bl	8003c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200001d4 	.word	0x200001d4

08000c54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <USART3_IRQHandler+0x10>)
 8000c5a:	f002 ffd1 	bl	8003c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000218 	.word	0x20000218

08000c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	return 1;
 8000c6c:	2301      	movs	r3, #1
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_kill>:

int _kill(int pid, int sig)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c82:	f003 ff29 	bl	8004ad8 <__errno>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2216      	movs	r2, #22
 8000c8a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_exit>:

void _exit (int status)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ffe7 	bl	8000c78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000caa:	e7fe      	b.n	8000caa <_exit+0x12>

08000cac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e00a      	b.n	8000cd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf0      	blt.n	8000cbe <_read+0x12>
	}

return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e009      	b.n	8000d0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fd6f 	bl	80007e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf1      	blt.n	8000cf8 <_write+0x12>
	}
	return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_close>:

int _close(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d46:	605a      	str	r2, [r3, #4]
	return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
	return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f003 fe8e 	bl	8004ad8 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20030000 	.word	0x20030000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	200000f4 	.word	0x200000f4
 8000df0:	20000470 	.word	0x20000470

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 0320 	add.w	r3, r7, #32
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000e48:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1680-1;
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000e52:	f240 628f 	movw	r2, #1679	; 0x68f
 8000e56:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000-1;
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000e60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e64:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e72:	482d      	ldr	r0, [pc, #180]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000e74:	f001 fd78 	bl	8002968 <HAL_TIM_Base_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8000e7e:	f7ff fe7d 	bl	8000b7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4826      	ldr	r0, [pc, #152]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000e90:	f002 f916 	bl	80030c0 <HAL_TIM_ConfigClockSource>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8000e9a:	f7ff fe6f 	bl	8000b7c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e9e:	4822      	ldr	r0, [pc, #136]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000ea0:	f001 fe22 	bl	8002ae8 <HAL_TIM_PWM_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8000eaa:	f7ff fe67 	bl	8000b7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481a      	ldr	r0, [pc, #104]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000ebe:	f002 fcff 	bl	80038c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8000ec8:	f7ff fe58 	bl	8000b7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ecc:	2360      	movs	r3, #96	; 0x60
 8000ece:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 75-1;
 8000ed0:	234a      	movs	r3, #74	; 0x4a
 8000ed2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4811      	ldr	r0, [pc, #68]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000ee4:	f002 f82a 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8000eee:	f7ff fe45 	bl	8000b7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000efa:	f002 f81f 	bl	8002f3c <HAL_TIM_PWM_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0xf0>
	{
		Error_Handler();
 8000f04:	f7ff fe3a 	bl	8000b7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000f0c:	f001 fe46 	bl	8002b9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f10:	2104      	movs	r1, #4
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000f14:	f001 fe42 	bl	8002b9c <HAL_TIM_PWM_Start>
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <MX_TIM2_Init+0x110>)
 8000f1a:	f000 f893 	bl	8001044 <HAL_TIM_MspPostInit>

}
 8000f1e:	bf00      	nop
 8000f20:	3738      	adds	r7, #56	; 0x38
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000108 	.word	0x20000108

08000f2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	463b      	mov	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <MX_TIM3_Init+0x9c>)
 8000f4c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84-1;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000f50:	2253      	movs	r2, #83	; 0x53
 8000f52:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4000-1;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000f5c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000f60:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f6e:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000f70:	f001 fcfa 	bl	8002968 <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 8000f7a:	f7ff fdff 	bl	8000b7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000f8c:	f002 f898 	bl	80030c0 <HAL_TIM_ConfigClockSource>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 8000f96:	f7ff fdf1 	bl	8000b7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000fa8:	f002 fc8a 	bl	80038c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 8000fb2:	f7ff fde3 	bl	8000b7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000fb6:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <MX_TIM3_Init+0x98>)
 8000fb8:	f001 fd26 	bl	8002a08 <HAL_TIM_Base_Start_IT>
	/* USER CODE END TIM3_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000150 	.word	0x20000150
 8000fc8:	40000400 	.word	0x40000400

08000fcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

	if(tim_baseHandle->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fdc:	d10e      	bne.n	8000ffc <HAL_TIM_Base_MspInit+0x30>
	{
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* TIM2 clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_TIM_Base_MspInit+0x70>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <HAL_TIM_Base_MspInit+0x70>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_TIM_Base_MspInit+0x70>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 8000ffa:	e01a      	b.n	8001032 <HAL_TIM_Base_MspInit+0x66>
	else if(tim_baseHandle->Instance==TIM3)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_TIM_Base_MspInit+0x74>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d115      	bne.n	8001032 <HAL_TIM_Base_MspInit+0x66>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_TIM_Base_MspInit+0x70>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <HAL_TIM_Base_MspInit+0x70>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_TIM_Base_MspInit+0x70>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	201d      	movs	r0, #29
 8001028:	f000 fd77 	bl	8001b1a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800102c:	201d      	movs	r0, #29
 800102e:	f000 fd90 	bl	8001b52 <HAL_NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40000400 	.word	0x40000400

08001044 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
	if(timHandle->Instance==TIM2)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001064:	d13b      	bne.n	80010de <HAL_TIM_MspPostInit+0x9a>
	{
		/* USER CODE BEGIN TIM2_MspPostInit 0 */

		/* USER CODE END TIM2_MspPostInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <HAL_TIM_MspPostInit+0xa4>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <HAL_TIM_MspPostInit+0xa4>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <HAL_TIM_MspPostInit+0xa4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_TIM_MspPostInit+0xa4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_TIM_MspPostInit+0xa4>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_TIM_MspPostInit+0xa4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
		/**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 800109e:	2301      	movs	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ae:	2301      	movs	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <HAL_TIM_MspPostInit+0xa8>)
 80010ba:	f000 fdf7 	bl	8001cac <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010be:	2308      	movs	r3, #8
 80010c0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ce:	2301      	movs	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <HAL_TIM_MspPostInit+0xac>)
 80010da:	f000 fde7 	bl	8001cac <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM2_MspPostInit 1 */

		/* USER CODE END TIM2_MspPostInit 1 */
	}

}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400

080010f4 <HAL_TIM_PeriodElapsedCallback>:
	}
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d118      	bne.n	8001136 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		t_cnt++ ;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800110c:	6013      	str	r3, [r2, #0]
		systick_count++;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001116:	6013      	str	r3, [r2, #0]
		if(t_cnt >= 250)             //1s
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2bf9      	cmp	r3, #249	; 0xf9
 800111e:	dd0a      	ble.n	8001136 <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			t_cnt = 0;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
			systick_sec++;
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a08      	ldr	r2, [pc, #32]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800112e:	6013      	str	r3, [r2, #0]
			systick_secFlag = 1;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
		}

	}

}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000150 	.word	0x20000150
 8001148:	200000f8 	.word	0x200000f8
 800114c:	200000fc 	.word	0x200000fc
 8001150:	20000100 	.word	0x20000100
 8001154:	20000104 	.word	0x20000104

08001158 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART2_UART_Init+0x54>)
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <MX_USART2_UART_Init+0x58>)
 8001160:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 19200;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_USART2_UART_Init+0x54>)
 8001164:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001168:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART2_UART_Init+0x54>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART2_UART_Init+0x54>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <MX_USART2_UART_Init+0x54>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART2_UART_Init+0x54>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_USART2_UART_Init+0x54>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART2_UART_Init+0x54>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800118e:	4807      	ldr	r0, [pc, #28]	; (80011ac <MX_USART2_UART_Init+0x54>)
 8001190:	f002 fc26 	bl	80039e0 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800119a:	f7ff fcef 	bl	8000b7c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	HAL_UART_Receive_IT(&huart2, &rx2d, 1);
 800119e:	2201      	movs	r2, #1
 80011a0:	4904      	ldr	r1, [pc, #16]	; (80011b4 <MX_USART2_UART_Init+0x5c>)
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <MX_USART2_UART_Init+0x54>)
 80011a4:	f002 fcfb 	bl	8003b9e <HAL_UART_Receive_IT>
	/* USER CODE END USART2_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200001d4 	.word	0x200001d4
 80011b0:	40004400 	.word	0x40004400
 80011b4:	20000198 	.word	0x20000198

080011b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_USART3_UART_Init+0x54>)
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <MX_USART3_UART_Init+0x58>)
 80011c0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_USART3_UART_Init+0x54>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_USART3_UART_Init+0x54>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_USART3_UART_Init+0x54>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <MX_USART3_UART_Init+0x54>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <MX_USART3_UART_Init+0x54>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <MX_USART3_UART_Init+0x54>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <MX_USART3_UART_Init+0x54>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <MX_USART3_UART_Init+0x54>)
 80011f0:	f002 fbf6 	bl	80039e0 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80011fa:	f7ff fcbf 	bl	8000b7c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */
	HAL_UART_Receive_IT(&huart3, &rx3d, 1);
 80011fe:	2201      	movs	r2, #1
 8001200:	4904      	ldr	r1, [pc, #16]	; (8001214 <MX_USART3_UART_Init+0x5c>)
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <MX_USART3_UART_Init+0x54>)
 8001204:	f002 fccb 	bl	8003b9e <HAL_UART_Receive_IT>
	/* USER CODE END USART3_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000218 	.word	0x20000218
 8001210:	40004800 	.word	0x40004800
 8001214:	20000199 	.word	0x20000199

08001218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
	if(uartHandle->Instance==USART2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a49      	ldr	r2, [pc, #292]	; (800135c <HAL_UART_MspInit+0x144>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d152      	bne.n	80012e0 <HAL_UART_MspInit+0xc8>
	{
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* USART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	4b48      	ldr	r3, [pc, #288]	; (8001360 <HAL_UART_MspInit+0x148>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a47      	ldr	r2, [pc, #284]	; (8001360 <HAL_UART_MspInit+0x148>)
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b45      	ldr	r3, [pc, #276]	; (8001360 <HAL_UART_MspInit+0x148>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_UART_MspInit+0x148>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a40      	ldr	r2, [pc, #256]	; (8001360 <HAL_UART_MspInit+0x148>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <HAL_UART_MspInit+0x148>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_UART_MspInit+0x148>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a39      	ldr	r2, [pc, #228]	; (8001360 <HAL_UART_MspInit+0x148>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <HAL_UART_MspInit+0x148>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
		/**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800128e:	2308      	movs	r3, #8
 8001290:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800129e:	2307      	movs	r3, #7
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	482e      	ldr	r0, [pc, #184]	; (8001364 <HAL_UART_MspInit+0x14c>)
 80012aa:	f000 fcff 	bl	8001cac <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ae:	2320      	movs	r3, #32
 80012b0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012be:	2307      	movs	r3, #7
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4827      	ldr	r0, [pc, #156]	; (8001368 <HAL_UART_MspInit+0x150>)
 80012ca:	f000 fcef 	bl	8001cac <HAL_GPIO_Init>

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2026      	movs	r0, #38	; 0x26
 80012d4:	f000 fc21 	bl	8001b1a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012d8:	2026      	movs	r0, #38	; 0x26
 80012da:	f000 fc3a 	bl	8001b52 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 80012de:	e039      	b.n	8001354 <HAL_UART_MspInit+0x13c>
	else if(uartHandle->Instance==USART3)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_UART_MspInit+0x154>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d134      	bne.n	8001354 <HAL_UART_MspInit+0x13c>
		__HAL_RCC_USART3_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <HAL_UART_MspInit+0x148>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_UART_MspInit+0x148>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_UART_MspInit+0x148>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_UART_MspInit+0x148>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a14      	ldr	r2, [pc, #80]	; (8001360 <HAL_UART_MspInit+0x148>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_UART_MspInit+0x148>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001326:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001334:	2307      	movs	r3, #7
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	480a      	ldr	r0, [pc, #40]	; (8001368 <HAL_UART_MspInit+0x150>)
 8001340:	f000 fcb4 	bl	8001cac <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2027      	movs	r0, #39	; 0x27
 800134a:	f000 fbe6 	bl	8001b1a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 800134e:	2027      	movs	r0, #39	; 0x27
 8001350:	f000 fbff 	bl	8001b52 <HAL_NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40004400 	.word	0x40004400
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40004800 	.word	0x40004800

08001370 <Serial2_Send>:
}

/* USER CODE BEGIN 1 */

void Serial2_Send(unsigned char t)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &t, 1, 10);
 800137a:	1df9      	adds	r1, r7, #7
 800137c:	230a      	movs	r3, #10
 800137e:	2201      	movs	r2, #1
 8001380:	4803      	ldr	r0, [pc, #12]	; (8001390 <Serial2_Send+0x20>)
 8001382:	f002 fb7a 	bl	8003a7a <HAL_UART_Transmit>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200001d4 	.word	0x200001d4

08001394 <Serial3_Send>:

void Serial3_Send(unsigned char t)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &t, 1, 10);
 800139e:	1df9      	adds	r1, r7, #7
 80013a0:	230a      	movs	r3, #10
 80013a2:	2201      	movs	r2, #1
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <Serial3_Send+0x20>)
 80013a6:	f002 fb68 	bl	8003a7a <HAL_UART_Transmit>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000218 	.word	0x20000218

080013b8 <Serial2_Send_String>:

void Serial2_Send_String(char* s)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	while( *s != '\0')
 80013c0:	e007      	b.n	80013d2 <Serial2_Send_String+0x1a>
	{
		Serial2_Send((unsigned char)(*s));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ffd2 	bl	8001370 <Serial2_Send>
		s++;   //s = s + 1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3301      	adds	r3, #1
 80013d0:	607b      	str	r3, [r7, #4]
	while( *s != '\0')
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f3      	bne.n	80013c2 <Serial2_Send_String+0xa>
	}
}
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <Serial3_Send_String>:

void Serial3_Send_String(char* s)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	while( *s != '\0')
 80013ec:	e007      	b.n	80013fe <Serial3_Send_String+0x1a>
	{
		Serial3_Send((unsigned char)(*s));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffce 	bl	8001394 <Serial3_Send>
		s++;   //s = s + 1;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3301      	adds	r3, #1
 80013fc:	607b      	str	r3, [r7, #4]
	while( *s != '\0')
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f3      	bne.n	80013ee <Serial3_Send_String+0xa>
	}
}
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_UART_RxCpltCallback+0x84>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10c      	bne.n	800143c <HAL_UART_RxCpltCallback+0x2c>
	{
		rx2Data = rx2d;
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_UART_RxCpltCallback+0x88>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_UART_RxCpltCallback+0x8c>)
 800142a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &rx2d, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	491a      	ldr	r1, [pc, #104]	; (8001498 <HAL_UART_RxCpltCallback+0x88>)
 8001430:	481b      	ldr	r0, [pc, #108]	; (80014a0 <HAL_UART_RxCpltCallback+0x90>)
 8001432:	f002 fbb4 	bl	8003b9e <HAL_UART_Receive_IT>
		rx2Flag = 1;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_UART_RxCpltCallback+0x94>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
	}
	if(huart->Instance == USART3)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_UART_RxCpltCallback+0x98>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d122      	bne.n	800148c <HAL_UART_RxCpltCallback+0x7c>
	{
		static int i=0;
		rx3Data[i] = rx3d;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_UART_RxCpltCallback+0x9c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_UART_RxCpltCallback+0xa0>)
 800144c:	7812      	ldrb	r2, [r2, #0]
 800144e:	b2d1      	uxtb	r1, r2
 8001450:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <HAL_UART_RxCpltCallback+0xa4>)
 8001452:	54d1      	strb	r1, [r2, r3]
		if(rx3Data[i] == '\r')
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_UART_RxCpltCallback+0x9c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <HAL_UART_RxCpltCallback+0xa4>)
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	2b0d      	cmp	r3, #13
 800145e:	d10b      	bne.n	8001478 <HAL_UART_RxCpltCallback+0x68>
		{
			rx3Data[i] = '\0';
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_UART_RxCpltCallback+0x9c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <HAL_UART_RxCpltCallback+0xa4>)
 8001466:	2100      	movs	r1, #0
 8001468:	54d1      	strb	r1, [r2, r3]
			rx3Flag = 1;
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_UART_RxCpltCallback+0xa8>)
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
			i = 0;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <HAL_UART_RxCpltCallback+0x9c>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e004      	b.n	8001482 <HAL_UART_RxCpltCallback+0x72>
		}
		else
		{
			i++;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_UART_RxCpltCallback+0x9c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_UART_RxCpltCallback+0x9c>)
 8001480:	6013      	str	r3, [r2, #0]
		}
		HAL_UART_Receive_IT(&huart3, &rx3d, 1);
 8001482:	2201      	movs	r2, #1
 8001484:	490a      	ldr	r1, [pc, #40]	; (80014b0 <HAL_UART_RxCpltCallback+0xa0>)
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <HAL_UART_RxCpltCallback+0xac>)
 8001488:	f002 fb89 	bl	8003b9e <HAL_UART_Receive_IT>
	}
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40004400 	.word	0x40004400
 8001498:	20000198 	.word	0x20000198
 800149c:	2000019c 	.word	0x2000019c
 80014a0:	200001d4 	.word	0x200001d4
 80014a4:	2000019a 	.word	0x2000019a
 80014a8:	40004800 	.word	0x40004800
 80014ac:	2000025c 	.word	0x2000025c
 80014b0:	20000199 	.word	0x20000199
 80014b4:	200001a0 	.word	0x200001a0
 80014b8:	2000019b 	.word	0x2000019b
 80014bc:	20000218 	.word	0x20000218

080014c0 <WIFI_init>:


volatile char uart2_rxdata[5][100];

int WIFI_init()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
	int i;
	printf("Wifi Module Restart!!\r\n");
 80014c6:	481b      	ldr	r0, [pc, #108]	; (8001534 <WIFI_init+0x74>)
 80014c8:	f003 fbbe 	bl	8004c48 <puts>
	if (!wifi_send_cmd("AT+RST","OK",TIMEOUT))   //wifi reset
 80014cc:	22fa      	movs	r2, #250	; 0xfa
 80014ce:	491a      	ldr	r1, [pc, #104]	; (8001538 <WIFI_init+0x78>)
 80014d0:	481a      	ldr	r0, [pc, #104]	; (800153c <WIFI_init+0x7c>)
 80014d2:	f000 f873 	bl	80015bc <wifi_send_cmd>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <WIFI_init+0x22>
	{
		printf("Module have no response.\r\n");
 80014dc:	4818      	ldr	r0, [pc, #96]	; (8001540 <WIFI_init+0x80>)
 80014de:	f003 fbb3 	bl	8004c48 <puts>
	}
	for(i=0;i<5;i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	e00b      	b.n	8001500 <WIFI_init+0x40>
	{
		if(connectWiFi())
 80014e8:	f000 f836 	bl	8001558 <connectWiFi>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <WIFI_init+0x3a>
		{
			printf("OK, Connected to WiFi.\r\n");
 80014f2:	4814      	ldr	r0, [pc, #80]	; (8001544 <WIFI_init+0x84>)
 80014f4:	f003 fba8 	bl	8004c48 <puts>
			break;
 80014f8:	e005      	b.n	8001506 <WIFI_init+0x46>
	for(i=0;i<5;i++)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3301      	adds	r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b04      	cmp	r3, #4
 8001504:	ddf0      	ble.n	80014e8 <WIFI_init+0x28>
		}
	}
	if(i == 5)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d104      	bne.n	8001516 <WIFI_init+0x56>
	{
		printf("Wifi connect fail.\r\n");
 800150c:	480e      	ldr	r0, [pc, #56]	; (8001548 <WIFI_init+0x88>)
 800150e:	f003 fb9b 	bl	8004c48 <puts>
		return 0;
 8001512:	2300      	movs	r3, #0
 8001514:	e00a      	b.n	800152c <WIFI_init+0x6c>
	}
	if (!wifi_send_cmd("AT+CIFSR","+CIFSR:STAIP,\"192",TIMEOUT)) //local ip
 8001516:	22fa      	movs	r2, #250	; 0xfa
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <WIFI_init+0x8c>)
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <WIFI_init+0x90>)
 800151c:	f000 f84e 	bl	80015bc <wifi_send_cmd>
		;

	if (!wifi_send_cmd("AT+CIPMUX=0","OK",TIMEOUT))   //single mode
 8001520:	22fa      	movs	r2, #250	; 0xfa
 8001522:	4905      	ldr	r1, [pc, #20]	; (8001538 <WIFI_init+0x78>)
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <WIFI_init+0x94>)
 8001526:	f000 f849 	bl	80015bc <wifi_send_cmd>
		;
	return 1;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	080062ec 	.word	0x080062ec
 8001538:	08006304 	.word	0x08006304
 800153c:	08006308 	.word	0x08006308
 8001540:	08006310 	.word	0x08006310
 8001544:	0800632c 	.word	0x0800632c
 8001548:	08006344 	.word	0x08006344
 800154c:	08006358 	.word	0x08006358
 8001550:	0800636c 	.word	0x0800636c
 8001554:	08006378 	.word	0x08006378

08001558 <connectWiFi>:
int connectWiFi()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08e      	sub	sp, #56	; 0x38
 800155c:	af00      	add	r7, sp, #0
	char cmd[50]={0};
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	222e      	movs	r2, #46	; 0x2e
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fade 	bl	8004b2c <memset>

	if (!wifi_send_cmd("AT+CWMODE=1","OK",TIMEOUT))	// timeout : 250 * 0.004 = 1Sec
 8001570:	22fa      	movs	r2, #250	; 0xfa
 8001572:	490d      	ldr	r1, [pc, #52]	; (80015a8 <connectWiFi+0x50>)
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <connectWiFi+0x54>)
 8001576:	f000 f821 	bl	80015bc <wifi_send_cmd>
		;

	sprintf(cmd,"AT+CWJAP=\"%s\",\"%s\"",SSID,PASS);		//AP name, password
 800157a:	1d38      	adds	r0, r7, #4
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <connectWiFi+0x58>)
 800157e:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <connectWiFi+0x5c>)
 8001580:	490d      	ldr	r1, [pc, #52]	; (80015b8 <connectWiFi+0x60>)
 8001582:	f003 fb69 	bl	8004c58 <siprintf>
	if (wifi_send_cmd(cmd,"OK",1000L))  { 					//AP 접속
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800158c:	4906      	ldr	r1, [pc, #24]	; (80015a8 <connectWiFi+0x50>)
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f814 	bl	80015bc <wifi_send_cmd>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <connectWiFi+0x46>
		return 1;
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <connectWiFi+0x48>
	}
	return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3738      	adds	r7, #56	; 0x38
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	08006304 	.word	0x08006304
 80015ac:	08006384 	.word	0x08006384
 80015b0:	08006390 	.word	0x08006390
 80015b4:	0800639c 	.word	0x0800639c
 80015b8:	080063a4 	.word	0x080063a4

080015bc <wifi_send_cmd>:
int wifi_send_cmd (char *str,const char *rstr, unsigned long timeout)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
	int ret=0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
	Serial2_Send_String(str);
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff fef3 	bl	80013b8 <Serial2_Send_String>
	Serial2_Send_String("\r\n");
 80015d2:	4814      	ldr	r0, [pc, #80]	; (8001624 <wifi_send_cmd+0x68>)
 80015d4:	f7ff fef0 	bl	80013b8 <Serial2_Send_String>

	ret = wifi_wait(str,rstr, timeout);
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f829 	bl	8001634 <wifi_wait>
 80015e2:	6138      	str	r0, [r7, #16]

	if(ret)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d117      	bne.n	800161a <wifi_send_cmd+0x5e>
		;
	else
	{
#ifdef  DEBUG_WIFI
		printf("\n[Recv_NG] wifi_wait(%s): TIMEOUT\r\n",str);
 80015ea:	68f9      	ldr	r1, [r7, #12]
 80015ec:	480e      	ldr	r0, [pc, #56]	; (8001628 <wifi_send_cmd+0x6c>)
 80015ee:	f003 faa5 	bl	8004b3c <iprintf>

		for(int i=0;i<5;i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	e00d      	b.n	8001614 <wifi_send_cmd+0x58>
		{
			printf("RECV TEST %d : %s\r\n",i,uart2_rxdata[i]);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2264      	movs	r2, #100	; 0x64
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <wifi_send_cmd+0x70>)
 8001602:	4413      	add	r3, r2
 8001604:	461a      	mov	r2, r3
 8001606:	6979      	ldr	r1, [r7, #20]
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <wifi_send_cmd+0x74>)
 800160a:	f003 fa97 	bl	8004b3c <iprintf>
		for(int i=0;i<5;i++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b04      	cmp	r3, #4
 8001618:	ddee      	ble.n	80015f8 <wifi_send_cmd+0x3c>
		}
#endif
	}
	return ret;
 800161a:	693b      	ldr	r3, [r7, #16]

}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	080063b8 	.word	0x080063b8
 8001628:	080063bc 	.word	0x080063bc
 800162c:	20000260 	.word	0x20000260
 8001630:	080063e0 	.word	0x080063e0

08001634 <wifi_wait>:
int wifi_wait(const char *str, const char *rstr, unsigned long timeout)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]

	int ucount_recv=0;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
	int i=0;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
	unsigned char data=0;
 8001648:	2300      	movs	r3, #0
 800164a:	75fb      	strb	r3, [r7, #23]
	unsigned long tick = systick_count;
 800164c:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <wifi_wait+0x110>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]

	ucount_recv = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
	memset((void *)uart2_rxdata,0x00,sizeof(uart2_rxdata));
 8001656:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800165a:	2100      	movs	r1, #0
 800165c:	483a      	ldr	r0, [pc, #232]	; (8001748 <wifi_wait+0x114>)
 800165e:	f003 fa65 	bl	8004b2c <memset>
	while (systick_count - tick < timeout)
 8001662:	e060      	b.n	8001726 <wifi_wait+0xf2>
	{
		if (rx2Flag == 0)
 8001664:	4b39      	ldr	r3, [pc, #228]	; (800174c <wifi_wait+0x118>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d100      	bne.n	8001670 <wifi_wait+0x3c>
			continue;
 800166e:	e05a      	b.n	8001726 <wifi_wait+0xf2>
		else if(rx2Flag == 1)
 8001670:	4b36      	ldr	r3, [pc, #216]	; (800174c <wifi_wait+0x118>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d112      	bne.n	80016a0 <wifi_wait+0x6c>
		{
			uart2_rxdata[i][ucount_recv] = data = rx2Data;
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <wifi_wait+0x11c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	75fb      	strb	r3, [r7, #23]
 8001680:	4a31      	ldr	r2, [pc, #196]	; (8001748 <wifi_wait+0x114>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	2164      	movs	r1, #100	; 0x64
 8001686:	fb01 f303 	mul.w	r3, r1, r3
 800168a:	441a      	add	r2, r3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	7dfa      	ldrb	r2, [r7, #23]
 8001692:	701a      	strb	r2, [r3, #0]
			rx2Flag = 0;
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <wifi_wait+0x118>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
			ucount_recv++;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3301      	adds	r3, #1
 800169e:	61fb      	str	r3, [r7, #28]
		}
		if (data == '\n')  //CR:0x0d:'\r', LF:0x0a:'\n'
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d13f      	bne.n	8001726 <wifi_wait+0xf2>
		{
			uart2_rxdata[i][ucount_recv] = 0;
 80016a6:	4a28      	ldr	r2, [pc, #160]	; (8001748 <wifi_wait+0x114>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2164      	movs	r1, #100	; 0x64
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	441a      	add	r2, r3
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
			if (strncmp(( char *)uart2_rxdata[i], rstr, strlen(rstr)) == 0)  //FIND
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2264      	movs	r2, #100	; 0x64
 80016be:	fb02 f303 	mul.w	r3, r2, r3
 80016c2:	4a21      	ldr	r2, [pc, #132]	; (8001748 <wifi_wait+0x114>)
 80016c4:	189c      	adds	r4, r3, r2
 80016c6:	68b8      	ldr	r0, [r7, #8]
 80016c8:	f7fe fd9c 	bl	8000204 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	4620      	mov	r0, r4
 80016d4:	f003 fae8 	bl	8004ca8 <strncmp>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d11a      	bne.n	8001714 <wifi_wait+0xe0>
			{
				if(!strncmp((char *)uart2_rxdata[i],"+CIFSR:STAIP",3))
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2264      	movs	r2, #100	; 0x64
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <wifi_wait+0x114>)
 80016e8:	4413      	add	r3, r2
 80016ea:	2203      	movs	r2, #3
 80016ec:	4919      	ldr	r1, [pc, #100]	; (8001754 <wifi_wait+0x120>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fada 	bl	8004ca8 <strncmp>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10a      	bne.n	8001710 <wifi_wait+0xdc>
					printf("Local IP : %s\n",uart2_rxdata[i]+13);
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2264      	movs	r2, #100	; 0x64
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	4a11      	ldr	r2, [pc, #68]	; (8001748 <wifi_wait+0x114>)
 8001704:	4413      	add	r3, r2
 8001706:	330d      	adds	r3, #13
 8001708:	4619      	mov	r1, r3
 800170a:	4813      	ldr	r0, [pc, #76]	; (8001758 <wifi_wait+0x124>)
 800170c:	f003 fa16 	bl	8004b3c <iprintf>
				return 1;
 8001710:	2301      	movs	r3, #1
 8001712:	e012      	b.n	800173a <wifi_wait+0x106>
			}

			ucount_recv = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
			i++;
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	3301      	adds	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
			if(i == 5)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d008      	beq.n	8001736 <wifi_wait+0x102>
				break;
			continue;
 8001724:	bf00      	nop
	while (systick_count - tick < timeout)
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <wifi_wait+0x110>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	d897      	bhi.n	8001664 <wifi_wait+0x30>
 8001734:	e000      	b.n	8001738 <wifi_wait+0x104>
				break;
 8001736:	bf00      	nop
		}

	}//close while
	return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	bf00      	nop
 8001744:	200000fc 	.word	0x200000fc
 8001748:	20000260 	.word	0x20000260
 800174c:	2000019a 	.word	0x2000019a
 8001750:	2000019c 	.word	0x2000019c
 8001754:	080063f4 	.word	0x080063f4
 8001758:	08006404 	.word	0x08006404

0800175c <WIFI_send>:

int WIFI_send(char *data)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0b4      	sub	sp, #208	; 0xd0
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	static int connect_flag = 0;

	char cmd[200]={0};
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	22c4      	movs	r2, #196	; 0xc4
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f003 f9db 	bl	8004b2c <memset>
	if(!connect_flag)
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <WIFI_send+0xb0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d123      	bne.n	80017c6 <WIFI_send+0x6a>
	{
		sprintf(cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d",DST_IP,DST_PORT);
 800177e:	f107 0008 	add.w	r0, r7, #8
 8001782:	f241 3388 	movw	r3, #5000	; 0x1388
 8001786:	4a22      	ldr	r2, [pc, #136]	; (8001810 <WIFI_send+0xb4>)
 8001788:	4922      	ldr	r1, [pc, #136]	; (8001814 <WIFI_send+0xb8>)
 800178a:	f003 fa65 	bl	8004c58 <siprintf>
		if (wifi_send_cmd(cmd,"CONNECT",TIMEOUT*2))   // timeout : 250 * 0.004 = 1Sec
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001796:	4920      	ldr	r1, [pc, #128]	; (8001818 <WIFI_send+0xbc>)
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff0f 	bl	80015bc <wifi_send_cmd>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <WIFI_send+0x50>
			connect_flag = 1;
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <WIFI_send+0xb0>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e00c      	b.n	80017c6 <WIFI_send+0x6a>

		else if (wifi_send_cmd(cmd,"ALREADY",TIMEOUT))   // timeout : 250 * 0.004 = 1Sec
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	22fa      	movs	r2, #250	; 0xfa
 80017b2:	491a      	ldr	r1, [pc, #104]	; (800181c <WIFI_send+0xc0>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff01 	bl	80015bc <wifi_send_cmd>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <WIFI_send+0x6a>
			connect_flag = 1;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <WIFI_send+0xb0>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
	}

	sprintf(cmd,"AT+CIPSEND=%d",strlen(data));
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7fe fd1c 	bl	8000204 <strlen>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	4913      	ldr	r1, [pc, #76]	; (8001820 <WIFI_send+0xc4>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fa3f 	bl	8004c58 <siprintf>

	if (!wifi_send_cmd(cmd,"OK",TIMEOUT))   // <AT+CIPSEND=10>   응답메시지
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	22fa      	movs	r2, #250	; 0xfa
 80017e0:	4910      	ldr	r1, [pc, #64]	; (8001824 <WIFI_send+0xc8>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff feea 	bl	80015bc <wifi_send_cmd>
		;

	if (!wifi_send_cmd(data,">",TIMEOUT))
 80017e8:	22fa      	movs	r2, #250	; 0xfa
 80017ea:	490f      	ldr	r1, [pc, #60]	; (8001828 <WIFI_send+0xcc>)
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fee5 	bl	80015bc <wifi_send_cmd>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <WIFI_send+0xa2>
		connect_flag = 0;
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <WIFI_send+0xb0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

	return connect_flag;
 80017fe:	4b03      	ldr	r3, [pc, #12]	; (800180c <WIFI_send+0xb0>)
 8001800:	681b      	ldr	r3, [r3, #0]
}
 8001802:	4618      	mov	r0, r3
 8001804:	37d0      	adds	r7, #208	; 0xd0
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000454 	.word	0x20000454
 8001810:	08006414 	.word	0x08006414
 8001814:	08006424 	.word	0x08006424
 8001818:	08006440 	.word	0x08006440
 800181c:	08006448 	.word	0x08006448
 8001820:	08006450 	.word	0x08006450
 8001824:	08006304 	.word	0x08006304
 8001828:	08006460 	.word	0x08006460

0800182c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001864 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001832:	490e      	ldr	r1, [pc, #56]	; (800186c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001834:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001848:	4c0b      	ldr	r4, [pc, #44]	; (8001878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001856:	f7ff facd 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185a:	f003 f943 	bl	8004ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185e:	f7fe ffd3 	bl	8000808 <main>
  bx  lr    
 8001862:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001864:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001870:	080066d8 	.word	0x080066d8
  ldr r2, =_sbss
 8001874:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001878:	2000046c 	.word	0x2000046c

0800187c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <HAL_Init+0x40>)
 800188a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_Init+0x40>)
 8001896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_Init+0x40>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 f92b 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff f968 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 f943 	bl	8001b6e <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f000 f90b 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_IncTick+0x20>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x24>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_IncTick+0x24>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008
 8001948:	20000458 	.word	0x20000458

0800194c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_GetTick+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000458 	.word	0x20000458

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff8e 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff29 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff3e 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff8e 	bl	8001a58 <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5d 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff31 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff feda 	bl	800194c <HAL_GetTick>
 8001b98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d008      	beq.n	8001bb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e052      	b.n	8001c5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0216 	bic.w	r2, r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <HAL_DMA_Abort+0x62>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0208 	bic.w	r2, r2, #8
 8001bf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c08:	e013      	b.n	8001c32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c0a:	f7ff fe9f 	bl	800194c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d90c      	bls.n	8001c32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2203      	movs	r2, #3
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e015      	b.n	8001c5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e4      	bne.n	8001c0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	223f      	movs	r2, #63	; 0x3f
 8001c46:	409a      	lsls	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d004      	beq.n	8001c84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e00c      	b.n	8001c9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2205      	movs	r2, #5
 8001c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0201 	bic.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	e177      	b.n	8001fb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f040 8166 	bne.w	8001fb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d005      	beq.n	8001cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d130      	bne.n	8001d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	2203      	movs	r2, #3
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 0201 	and.w	r2, r3, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d017      	beq.n	8001d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d123      	bne.n	8001df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	08da      	lsrs	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3208      	adds	r2, #8
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80c0 	beq.w	8001fb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4e:	4a61      	ldr	r2, [pc, #388]	; (8001fd4 <HAL_GPIO_Init+0x328>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HAL_GPIO_Init+0x32c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d037      	beq.n	8001eea <HAL_GPIO_Init+0x23e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <HAL_GPIO_Init+0x330>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d031      	beq.n	8001ee6 <HAL_GPIO_Init+0x23a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a56      	ldr	r2, [pc, #344]	; (8001fe0 <HAL_GPIO_Init+0x334>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d02b      	beq.n	8001ee2 <HAL_GPIO_Init+0x236>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <HAL_GPIO_Init+0x338>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d025      	beq.n	8001ede <HAL_GPIO_Init+0x232>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a54      	ldr	r2, [pc, #336]	; (8001fe8 <HAL_GPIO_Init+0x33c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01f      	beq.n	8001eda <HAL_GPIO_Init+0x22e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a53      	ldr	r2, [pc, #332]	; (8001fec <HAL_GPIO_Init+0x340>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d019      	beq.n	8001ed6 <HAL_GPIO_Init+0x22a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_GPIO_Init+0x344>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0x226>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a51      	ldr	r2, [pc, #324]	; (8001ff4 <HAL_GPIO_Init+0x348>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00d      	beq.n	8001ece <HAL_GPIO_Init+0x222>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a50      	ldr	r2, [pc, #320]	; (8001ff8 <HAL_GPIO_Init+0x34c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x21e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4f      	ldr	r2, [pc, #316]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_GPIO_Init+0x21a>
 8001ec2:	2309      	movs	r3, #9
 8001ec4:	e012      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	e010      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001eca:	2308      	movs	r3, #8
 8001ecc:	e00e      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e00c      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	e00a      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	e008      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001eda:	2304      	movs	r3, #4
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e004      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001eea:	2300      	movs	r3, #0
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	f002 0203 	and.w	r2, r2, #3
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001efc:	4935      	ldr	r1, [pc, #212]	; (8001fd4 <HAL_GPIO_Init+0x328>)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2e:	4a34      	ldr	r2, [pc, #208]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f58:	4a29      	ldr	r2, [pc, #164]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	f67f ae84 	bls.w	8001cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40013800 	.word	0x40013800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020c00 	.word	0x40020c00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40021400 	.word	0x40021400
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40021c00 	.word	0x40021c00
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40022400 	.word	0x40022400
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e267      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d075      	beq.n	8002142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002056:	4b88      	ldr	r3, [pc, #544]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b04      	cmp	r3, #4
 8002060:	d00c      	beq.n	800207c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002062:	4b85      	ldr	r3, [pc, #532]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206a:	2b08      	cmp	r3, #8
 800206c:	d112      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4b82      	ldr	r3, [pc, #520]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207a:	d10b      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	4b7e      	ldr	r3, [pc, #504]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d05b      	beq.n	8002140 <HAL_RCC_OscConfig+0x108>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d157      	bne.n	8002140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e242      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0x74>
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a75      	ldr	r2, [pc, #468]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e01d      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x98>
 80020b6:	4b70      	ldr	r3, [pc, #448]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6f      	ldr	r2, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6c      	ldr	r2, [pc, #432]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020d0:	4b69      	ldr	r3, [pc, #420]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a68      	ldr	r2, [pc, #416]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b66      	ldr	r3, [pc, #408]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a65      	ldr	r2, [pc, #404]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fc2c 	bl	800194c <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff fc28 	bl	800194c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e207      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b5b      	ldr	r3, [pc, #364]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0xc0>
 8002116:	e014      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fc18 	bl	800194c <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fc14 	bl	800194c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1f3      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	4b51      	ldr	r3, [pc, #324]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0xe8>
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d063      	beq.n	8002216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002162:	2b08      	cmp	r3, #8
 8002164:	d11c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d116      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e1c7      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4937      	ldr	r1, [pc, #220]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	e03a      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_OscConfig+0x244>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7ff fbcd 	bl	800194c <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff fbc9 	bl	800194c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1a8      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4925      	ldr	r1, [pc, #148]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_RCC_OscConfig+0x244>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff fbac 	bl	800194c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f8:	f7ff fba8 	bl	800194c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e187      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d036      	beq.n	8002290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_RCC_OscConfig+0x248>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7ff fb8c 	bl	800194c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002238:	f7ff fb88 	bl	800194c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e167      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800224c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x200>
 8002256:	e01b      	b.n	8002290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_OscConfig+0x248>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7ff fb75 	bl	800194c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	e00e      	b.n	8002284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002266:	f7ff fb71 	bl	800194c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d907      	bls.n	8002284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e150      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
 8002278:	40023800 	.word	0x40023800
 800227c:	42470000 	.word	0x42470000
 8002280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ea      	bne.n	8002266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8097 	beq.w	80023cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a2:	4b81      	ldr	r3, [pc, #516]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	4b7d      	ldr	r3, [pc, #500]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a7c      	ldr	r2, [pc, #496]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
 80022be:	4b7a      	ldr	r3, [pc, #488]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b77      	ldr	r3, [pc, #476]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	4b74      	ldr	r3, [pc, #464]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a73      	ldr	r2, [pc, #460]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7ff fb31 	bl	800194c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7ff fb2d 	bl	800194c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e10c      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x2ea>
 8002314:	4b64      	ldr	r3, [pc, #400]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a63      	ldr	r2, [pc, #396]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	e01c      	b.n	800235c <HAL_RCC_OscConfig+0x324>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b05      	cmp	r3, #5
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x30c>
 800232a:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232e:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6713      	str	r3, [r2, #112]	; 0x70
 8002336:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	4a5b      	ldr	r2, [pc, #364]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6713      	str	r3, [r2, #112]	; 0x70
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0x324>
 8002344:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	4a57      	ldr	r2, [pc, #348]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	6713      	str	r3, [r2, #112]	; 0x70
 8002350:	4b55      	ldr	r3, [pc, #340]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4a54      	ldr	r2, [pc, #336]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002356:	f023 0304 	bic.w	r3, r3, #4
 800235a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7ff faf2 	bl	800194c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7ff faee 	bl	800194c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0cb      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ee      	beq.n	800236c <HAL_RCC_OscConfig+0x334>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7ff fadc 	bl	800194c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7ff fad8 	bl	800194c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0b5      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ae:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ee      	bne.n	8002398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	4a38      	ldr	r2, [pc, #224]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a1 	beq.w	8002518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d6:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d05c      	beq.n	800249c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d141      	bne.n	800246e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ea:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_RCC_OscConfig+0x478>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff faac 	bl	800194c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7ff faa8 	bl	800194c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e087      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	019b      	lsls	r3, r3, #6
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	085b      	lsrs	r3, r3, #1
 800242e:	3b01      	subs	r3, #1
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	491b      	ldr	r1, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCC_OscConfig+0x478>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7ff fa81 	bl	800194c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244e:	f7ff fa7d 	bl	800194c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e05c      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x416>
 800246c:	e054      	b.n	8002518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_RCC_OscConfig+0x478>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7ff fa6a 	bl	800194c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7ff fa66 	bl	800194c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e045      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x444>
 800249a:	e03d      	b.n	8002518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e038      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000
 80024b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x4ec>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d028      	beq.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d121      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d11a      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024e4:	4013      	ands	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d111      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d107      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800

08002528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0cc      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b68      	ldr	r3, [pc, #416]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d90c      	bls.n	8002564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0b8      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800257c:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002594:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800259e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b50      	ldr	r3, [pc, #320]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	494d      	ldr	r1, [pc, #308]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d044      	beq.n	8002648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d119      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e07f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e6:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e067      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002606:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 0203 	bic.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4934      	ldr	r1, [pc, #208]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002618:	f7ff f998 	bl	800194c <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	e00a      	b.n	8002636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002620:	f7ff f994 	bl	800194c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e04f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 020c 	and.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1eb      	bne.n	8002620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d20c      	bcs.n	8002670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e032      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4916      	ldr	r1, [pc, #88]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269a:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	490e      	ldr	r1, [pc, #56]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ae:	f000 f821 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	490a      	ldr	r1, [pc, #40]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	5ccb      	ldrb	r3, [r1, r3]
 80026c2:	fa22 f303 	lsr.w	r3, r2, r3
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f8f8 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	08006464 	.word	0x08006464
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000004 	.word	0x20000004

080026f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f8:	b094      	sub	sp, #80	; 0x50
 80026fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002700:	2300      	movs	r3, #0
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002704:	2300      	movs	r3, #0
 8002706:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270c:	4b79      	ldr	r3, [pc, #484]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d00d      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x40>
 8002718:	2b08      	cmp	r3, #8
 800271a:	f200 80e1 	bhi.w	80028e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x34>
 8002722:	2b04      	cmp	r3, #4
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x3a>
 8002726:	e0db      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b73      	ldr	r3, [pc, #460]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800272a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800272c:	e0db      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272e:	4b73      	ldr	r3, [pc, #460]	; (80028fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002730:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002732:	e0d8      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002734:	4b6f      	ldr	r3, [pc, #444]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800273c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273e:	4b6d      	ldr	r3, [pc, #436]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d063      	beq.n	8002812 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274a:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	2200      	movs	r2, #0
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
 8002754:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
 800275e:	2300      	movs	r3, #0
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
 8002762:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002766:	4622      	mov	r2, r4
 8002768:	462b      	mov	r3, r5
 800276a:	f04f 0000 	mov.w	r0, #0
 800276e:	f04f 0100 	mov.w	r1, #0
 8002772:	0159      	lsls	r1, r3, #5
 8002774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002778:	0150      	lsls	r0, r2, #5
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4621      	mov	r1, r4
 8002780:	1a51      	subs	r1, r2, r1
 8002782:	6139      	str	r1, [r7, #16]
 8002784:	4629      	mov	r1, r5
 8002786:	eb63 0301 	sbc.w	r3, r3, r1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002798:	4659      	mov	r1, fp
 800279a:	018b      	lsls	r3, r1, #6
 800279c:	4651      	mov	r1, sl
 800279e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027a2:	4651      	mov	r1, sl
 80027a4:	018a      	lsls	r2, r1, #6
 80027a6:	4651      	mov	r1, sl
 80027a8:	ebb2 0801 	subs.w	r8, r2, r1
 80027ac:	4659      	mov	r1, fp
 80027ae:	eb63 0901 	sbc.w	r9, r3, r1
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c6:	4690      	mov	r8, r2
 80027c8:	4699      	mov	r9, r3
 80027ca:	4623      	mov	r3, r4
 80027cc:	eb18 0303 	adds.w	r3, r8, r3
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	462b      	mov	r3, r5
 80027d4:	eb49 0303 	adc.w	r3, r9, r3
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027e6:	4629      	mov	r1, r5
 80027e8:	024b      	lsls	r3, r1, #9
 80027ea:	4621      	mov	r1, r4
 80027ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027f0:	4621      	mov	r1, r4
 80027f2:	024a      	lsls	r2, r1, #9
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fa:	2200      	movs	r2, #0
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002800:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002804:	f7fd fd5c 	bl	80002c0 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4613      	mov	r3, r2
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002810:	e058      	b.n	80028c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	2200      	movs	r2, #0
 800281a:	4618      	mov	r0, r3
 800281c:	4611      	mov	r1, r2
 800281e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002822:	623b      	str	r3, [r7, #32]
 8002824:	2300      	movs	r3, #0
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
 8002828:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	f04f 0000 	mov.w	r0, #0
 8002834:	f04f 0100 	mov.w	r1, #0
 8002838:	0159      	lsls	r1, r3, #5
 800283a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283e:	0150      	lsls	r0, r2, #5
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4641      	mov	r1, r8
 8002846:	ebb2 0a01 	subs.w	sl, r2, r1
 800284a:	4649      	mov	r1, r9
 800284c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800285c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002860:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002864:	ebb2 040a 	subs.w	r4, r2, sl
 8002868:	eb63 050b 	sbc.w	r5, r3, fp
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	00eb      	lsls	r3, r5, #3
 8002876:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800287a:	00e2      	lsls	r2, r4, #3
 800287c:	4614      	mov	r4, r2
 800287e:	461d      	mov	r5, r3
 8002880:	4643      	mov	r3, r8
 8002882:	18e3      	adds	r3, r4, r3
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	464b      	mov	r3, r9
 8002888:	eb45 0303 	adc.w	r3, r5, r3
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	e9d7 4500 	ldrd	r4, r5, [r7]
 800289a:	4629      	mov	r1, r5
 800289c:	028b      	lsls	r3, r1, #10
 800289e:	4621      	mov	r1, r4
 80028a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a4:	4621      	mov	r1, r4
 80028a6:	028a      	lsls	r2, r1, #10
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ae:	2200      	movs	r2, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	61fa      	str	r2, [r7, #28]
 80028b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b8:	f7fd fd02 	bl	80002c0 <__aeabi_uldivmod>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4613      	mov	r3, r2
 80028c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	3301      	adds	r3, #1
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028de:	e002      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3750      	adds	r7, #80	; 0x50
 80028ec:	46bd      	mov	sp, r7
 80028ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f2:	bf00      	nop
 80028f4:	40023800 	.word	0x40023800
 80028f8:	00f42400 	.word	0x00f42400
 80028fc:	007a1200 	.word	0x007a1200

08002900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_RCC_GetHCLKFreq+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000000 	.word	0x20000000

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800291c:	f7ff fff0 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0a9b      	lsrs	r3, r3, #10
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4903      	ldr	r1, [pc, #12]	; (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	08006474 	.word	0x08006474

08002940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002944:	f7ff ffdc 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0b5b      	lsrs	r3, r3, #13
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	08006474 	.word	0x08006474

08002968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e041      	b.n	80029fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe fb1c 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f000 fc7a 	bl	80032a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d001      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e04e      	b.n	8002abe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a23      	ldr	r2, [pc, #140]	; (8002acc <HAL_TIM_Base_Start_IT+0xc4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d022      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x80>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4a:	d01d      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x80>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d018      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x80>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d013      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x80>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00e      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x80>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1b      	ldr	r2, [pc, #108]	; (8002adc <HAL_TIM_Base_Start_IT+0xd4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d009      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x80>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x80>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d111      	bne.n	8002aac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d010      	beq.n	8002abc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aaa:	e007      	b.n	8002abc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40010000 	.word	0x40010000
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	40000800 	.word	0x40000800
 8002ad8:	40000c00 	.word	0x40000c00
 8002adc:	40010400 	.word	0x40010400
 8002ae0:	40014000 	.word	0x40014000
 8002ae4:	40001800 	.word	0x40001800

08002ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e041      	b.n	8002b7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f839 	bl	8002b86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 fbba 	bl	80032a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_TIM_PWM_Start+0x24>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	e022      	b.n	8002c06 <HAL_TIM_PWM_Start+0x6a>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d109      	bne.n	8002bda <HAL_TIM_PWM_Start+0x3e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	e015      	b.n	8002c06 <HAL_TIM_PWM_Start+0x6a>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d109      	bne.n	8002bf4 <HAL_TIM_PWM_Start+0x58>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	e008      	b.n	8002c06 <HAL_TIM_PWM_Start+0x6a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e07c      	b.n	8002d08 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <HAL_TIM_PWM_Start+0x82>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c1c:	e013      	b.n	8002c46 <HAL_TIM_PWM_Start+0xaa>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_PWM_Start+0x92>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c2c:	e00b      	b.n	8002c46 <HAL_TIM_PWM_Start+0xaa>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d104      	bne.n	8002c3e <HAL_TIM_PWM_Start+0xa2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c3c:	e003      	b.n	8002c46 <HAL_TIM_PWM_Start+0xaa>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fe10 	bl	8003874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2d      	ldr	r2, [pc, #180]	; (8002d10 <HAL_TIM_PWM_Start+0x174>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d004      	beq.n	8002c68 <HAL_TIM_PWM_Start+0xcc>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <HAL_TIM_PWM_Start+0x178>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <HAL_TIM_PWM_Start+0xd0>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_TIM_PWM_Start+0xd2>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d007      	beq.n	8002c82 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a22      	ldr	r2, [pc, #136]	; (8002d10 <HAL_TIM_PWM_Start+0x174>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d022      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0x136>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d01d      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0x136>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <HAL_TIM_PWM_Start+0x17c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d018      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0x136>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <HAL_TIM_PWM_Start+0x180>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0x136>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <HAL_TIM_PWM_Start+0x184>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0x136>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_TIM_PWM_Start+0x178>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0x136>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <HAL_TIM_PWM_Start+0x188>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_TIM_PWM_Start+0x136>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a16      	ldr	r2, [pc, #88]	; (8002d28 <HAL_TIM_PWM_Start+0x18c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d111      	bne.n	8002cf6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b06      	cmp	r3, #6
 8002ce2:	d010      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf4:	e007      	b.n	8002d06 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40010000 	.word	0x40010000
 8002d14:	40010400 	.word	0x40010400
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40000800 	.word	0x40000800
 8002d20:	40000c00 	.word	0x40000c00
 8002d24:	40014000 	.word	0x40014000
 8002d28:	40001800 	.word	0x40001800

08002d2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d122      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d11b      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0202 	mvn.w	r2, #2
 8002d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa77 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa69 	bl	800324e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fa7a 	bl	8003276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d122      	bne.n	8002ddc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d11b      	bne.n	8002ddc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0204 	mvn.w	r2, #4
 8002dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa4d 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8002dc8:	e005      	b.n	8002dd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fa3f 	bl	800324e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fa50 	bl	8003276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d122      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d11b      	bne.n	8002e30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0208 	mvn.w	r2, #8
 8002e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2204      	movs	r2, #4
 8002e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa23 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8002e1c:	e005      	b.n	8002e2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fa15 	bl	800324e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fa26 	bl	8003276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d122      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d11b      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f06f 0210 	mvn.w	r2, #16
 8002e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f9f9 	bl	8003262 <HAL_TIM_IC_CaptureCallback>
 8002e70:	e005      	b.n	8002e7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f9eb 	bl	800324e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f9fc 	bl	8003276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10e      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d107      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0201 	mvn.w	r2, #1
 8002ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7fe f922 	bl	80010f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eba:	2b80      	cmp	r3, #128	; 0x80
 8002ebc:	d10e      	bne.n	8002edc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec8:	2b80      	cmp	r3, #128	; 0x80
 8002eca:	d107      	bne.n	8002edc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fd78 	bl	80039cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d10e      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d107      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f9c1 	bl	800328a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d10e      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d107      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0220 	mvn.w	r2, #32
 8002f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fd42 	bl	80039b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0ae      	b.n	80030b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	f200 809f 	bhi.w	80030a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	080030a9 	.word	0x080030a9
 8002f78:	080030a9 	.word	0x080030a9
 8002f7c:	080030a9 	.word	0x080030a9
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	080030a9 	.word	0x080030a9
 8002f88:	080030a9 	.word	0x080030a9
 8002f8c:	080030a9 	.word	0x080030a9
 8002f90:	08003027 	.word	0x08003027
 8002f94:	080030a9 	.word	0x080030a9
 8002f98:	080030a9 	.word	0x080030a9
 8002f9c:	080030a9 	.word	0x080030a9
 8002fa0:	08003067 	.word	0x08003067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fa18 	bl	80033e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6999      	ldr	r1, [r3, #24]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
      break;
 8002fe2:	e064      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fa68 	bl	80034c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]
      break;
 8003024:	e043      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fabd 	bl	80035ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0208 	orr.w	r2, r2, #8
 8003040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0204 	bic.w	r2, r2, #4
 8003050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69d9      	ldr	r1, [r3, #28]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	61da      	str	r2, [r3, #28]
      break;
 8003064:	e023      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fb11 	bl	8003694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	61da      	str	r2, [r3, #28]
      break;
 80030a6:	e002      	b.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
      break;
 80030ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_TIM_ConfigClockSource+0x1c>
 80030d8:	2302      	movs	r3, #2
 80030da:	e0b4      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x186>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003114:	d03e      	beq.n	8003194 <HAL_TIM_ConfigClockSource+0xd4>
 8003116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311a:	f200 8087 	bhi.w	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800311e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003122:	f000 8086 	beq.w	8003232 <HAL_TIM_ConfigClockSource+0x172>
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	d87f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800312c:	2b70      	cmp	r3, #112	; 0x70
 800312e:	d01a      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0xa6>
 8003130:	2b70      	cmp	r3, #112	; 0x70
 8003132:	d87b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b60      	cmp	r3, #96	; 0x60
 8003136:	d050      	beq.n	80031da <HAL_TIM_ConfigClockSource+0x11a>
 8003138:	2b60      	cmp	r3, #96	; 0x60
 800313a:	d877      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b50      	cmp	r3, #80	; 0x50
 800313e:	d03c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0xfa>
 8003140:	2b50      	cmp	r3, #80	; 0x50
 8003142:	d873      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d058      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x13a>
 8003148:	2b40      	cmp	r3, #64	; 0x40
 800314a:	d86f      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d064      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d86b      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d060      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d867      	bhi.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05c      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003160:	2b10      	cmp	r3, #16
 8003162:	d05a      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x15a>
 8003164:	e062      	b.n	800322c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f000 fb5d 	bl	8003834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	609a      	str	r2, [r3, #8]
      break;
 8003192:	e04f      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6899      	ldr	r1, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f000 fb46 	bl	8003834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b6:	609a      	str	r2, [r3, #8]
      break;
 80031b8:	e03c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f000 faba 	bl	8003740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2150      	movs	r1, #80	; 0x50
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fb13 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 80031d8:	e02c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 fad9 	bl	800379e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2160      	movs	r1, #96	; 0x60
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fb03 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 80031f8:	e01c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	461a      	mov	r2, r3
 8003208:	f000 fa9a 	bl	8003740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2140      	movs	r1, #64	; 0x40
 8003212:	4618      	mov	r0, r3
 8003214:	f000 faf3 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 8003218:	e00c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f000 faea 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 800322a:	e003      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e000      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <TIM_Base_SetConfig+0x114>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d013      	beq.n	80032e0 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032be:	d00f      	beq.n	80032e0 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3d      	ldr	r2, [pc, #244]	; (80033b8 <TIM_Base_SetConfig+0x118>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00b      	beq.n	80032e0 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3c      	ldr	r2, [pc, #240]	; (80033bc <TIM_Base_SetConfig+0x11c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d007      	beq.n	80032e0 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a3b      	ldr	r2, [pc, #236]	; (80033c0 <TIM_Base_SetConfig+0x120>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a3a      	ldr	r2, [pc, #232]	; (80033c4 <TIM_Base_SetConfig+0x124>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d108      	bne.n	80032f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2f      	ldr	r2, [pc, #188]	; (80033b4 <TIM_Base_SetConfig+0x114>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d02b      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003300:	d027      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2c      	ldr	r2, [pc, #176]	; (80033b8 <TIM_Base_SetConfig+0x118>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d023      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <TIM_Base_SetConfig+0x11c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01f      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2a      	ldr	r2, [pc, #168]	; (80033c0 <TIM_Base_SetConfig+0x120>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01b      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a29      	ldr	r2, [pc, #164]	; (80033c4 <TIM_Base_SetConfig+0x124>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d017      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <TIM_Base_SetConfig+0x128>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a27      	ldr	r2, [pc, #156]	; (80033cc <TIM_Base_SetConfig+0x12c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00f      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <TIM_Base_SetConfig+0x130>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00b      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <TIM_Base_SetConfig+0x134>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <TIM_Base_SetConfig+0x138>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a23      	ldr	r2, [pc, #140]	; (80033dc <TIM_Base_SetConfig+0x13c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d108      	bne.n	8003364 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <TIM_Base_SetConfig+0x114>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0xf8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <TIM_Base_SetConfig+0x124>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d103      	bne.n	80033a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	615a      	str	r2, [r3, #20]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40010000 	.word	0x40010000
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40000c00 	.word	0x40000c00
 80033c4:	40010400 	.word	0x40010400
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800
 80033d4:	40001800 	.word	0x40001800
 80033d8:	40001c00 	.word	0x40001c00
 80033dc:	40002000 	.word	0x40002000

080033e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f023 0201 	bic.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0303 	bic.w	r3, r3, #3
 8003416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f023 0302 	bic.w	r3, r3, #2
 8003428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a20      	ldr	r2, [pc, #128]	; (80034b8 <TIM_OC1_SetConfig+0xd8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_OC1_SetConfig+0x64>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <TIM_OC1_SetConfig+0xdc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d10c      	bne.n	800345e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0308 	bic.w	r3, r3, #8
 800344a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <TIM_OC1_SetConfig+0xd8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d003      	beq.n	800346e <TIM_OC1_SetConfig+0x8e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a14      	ldr	r2, [pc, #80]	; (80034bc <TIM_OC1_SetConfig+0xdc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d111      	bne.n	8003492 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800347c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40010000 	.word	0x40010000
 80034bc:	40010400 	.word	0x40010400

080034c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f023 0210 	bic.w	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0320 	bic.w	r3, r3, #32
 800350a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <TIM_OC2_SetConfig+0xe4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_OC2_SetConfig+0x68>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a21      	ldr	r2, [pc, #132]	; (80035a8 <TIM_OC2_SetConfig+0xe8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d10d      	bne.n	8003544 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800352e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a17      	ldr	r2, [pc, #92]	; (80035a4 <TIM_OC2_SetConfig+0xe4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <TIM_OC2_SetConfig+0x94>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a16      	ldr	r2, [pc, #88]	; (80035a8 <TIM_OC2_SetConfig+0xe8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d113      	bne.n	800357c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800355a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40010400 	.word	0x40010400

080035ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a21      	ldr	r2, [pc, #132]	; (800368c <TIM_OC3_SetConfig+0xe0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_OC3_SetConfig+0x66>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a20      	ldr	r2, [pc, #128]	; (8003690 <TIM_OC3_SetConfig+0xe4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d10d      	bne.n	800362e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800362c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a16      	ldr	r2, [pc, #88]	; (800368c <TIM_OC3_SetConfig+0xe0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_OC3_SetConfig+0x92>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a15      	ldr	r2, [pc, #84]	; (8003690 <TIM_OC3_SetConfig+0xe4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d113      	bne.n	8003666 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800364c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	621a      	str	r2, [r3, #32]
}
 8003680:	bf00      	nop
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	40010000 	.word	0x40010000
 8003690:	40010400 	.word	0x40010400

08003694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	031b      	lsls	r3, r3, #12
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <TIM_OC4_SetConfig+0xa4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_OC4_SetConfig+0x68>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a11      	ldr	r2, [pc, #68]	; (800373c <TIM_OC4_SetConfig+0xa8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d109      	bne.n	8003710 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	019b      	lsls	r3, r3, #6
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	621a      	str	r2, [r3, #32]
}
 800372a:	bf00      	nop
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40010000 	.word	0x40010000
 800373c:	40010400 	.word	0x40010400

08003740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f023 0201 	bic.w	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f023 030a 	bic.w	r3, r3, #10
 800377c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800379e:	b480      	push	{r7}
 80037a0:	b087      	sub	sp, #28
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f023 0210 	bic.w	r2, r3, #16
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	031b      	lsls	r3, r3, #12
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	f043 0307 	orr.w	r3, r3, #7
 8003820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	609a      	str	r2, [r3, #8]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800384e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	021a      	lsls	r2, r3, #8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	431a      	orrs	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	609a      	str	r2, [r3, #8]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2201      	movs	r2, #1
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a1a      	ldr	r2, [r3, #32]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	43db      	mvns	r3, r3
 8003896:	401a      	ands	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a1a      	ldr	r2, [r3, #32]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e05a      	b.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a21      	ldr	r2, [pc, #132]	; (800399c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d022      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003924:	d01d      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d018      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10c      	bne.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4313      	orrs	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40010000 	.word	0x40010000
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800
 80039a8:	40000c00 	.word	0x40000c00
 80039ac:	40010400 	.word	0x40010400
 80039b0:	40014000 	.word	0x40014000
 80039b4:	40001800 	.word	0x40001800

080039b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e03f      	b.n	8003a72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd fc06 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2224      	movs	r2, #36	; 0x24
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fddf 	bl	80045e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b08a      	sub	sp, #40	; 0x28
 8003a7e:	af02      	add	r7, sp, #8
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	603b      	str	r3, [r7, #0]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d17c      	bne.n	8003b94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_UART_Transmit+0x2c>
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e075      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Transmit+0x3e>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e06e      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2221      	movs	r2, #33	; 0x21
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ace:	f7fd ff3d 	bl	800194c <HAL_GetTick>
 8003ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	88fa      	ldrh	r2, [r7, #6]
 8003ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae8:	d108      	bne.n	8003afc <HAL_UART_Transmit+0x82>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d104      	bne.n	8003afc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e003      	b.n	8003b04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b0c:	e02a      	b.n	8003b64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fb1f 	bl	800415c <UART_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e036      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	3302      	adds	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e007      	b.n	8003b56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1cf      	bne.n	8003b0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2140      	movs	r1, #64	; 0x40
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 faef 	bl	800415c <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e006      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d11d      	bne.n	8003bf4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_UART_Receive_IT+0x26>
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e016      	b.n	8003bf6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Receive_IT+0x38>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e00f      	b.n	8003bf6 <HAL_UART_Receive_IT+0x58>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003be4:	88fb      	ldrh	r3, [r7, #6]
 8003be6:	461a      	mov	r2, r3
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fb24 	bl	8004238 <UART_Start_Receive_IT>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	e000      	b.n	8003bf6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b0ba      	sub	sp, #232	; 0xe8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10f      	bne.n	8003c66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_UART_IRQHandler+0x66>
 8003c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fc07 	bl	8004472 <UART_Receive_IT>
      return;
 8003c64:	e256      	b.n	8004114 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80de 	beq.w	8003e2c <HAL_UART_IRQHandler+0x22c>
 8003c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80d1 	beq.w	8003e2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_UART_IRQHandler+0xae>
 8003c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_UART_IRQHandler+0xd2>
 8003cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f043 0202 	orr.w	r2, r3, #2
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_UART_IRQHandler+0xf6>
 8003cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f043 0204 	orr.w	r2, r3, #4
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d011      	beq.n	8003d26 <HAL_UART_IRQHandler+0x126>
 8003d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f043 0208 	orr.w	r2, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 81ed 	beq.w	800410a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_UART_IRQHandler+0x14e>
 8003d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fb92 	bl	8004472 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <HAL_UART_IRQHandler+0x17a>
 8003d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d04f      	beq.n	8003e1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa9a 	bl	80042b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d141      	bne.n	8003e12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3314      	adds	r3, #20
 8003d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1d9      	bne.n	8003d8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d013      	beq.n	8003e0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	4a7d      	ldr	r2, [pc, #500]	; (8003fdc <HAL_UART_IRQHandler+0x3dc>)
 8003de8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd ff39 	bl	8001c66 <HAL_DMA_Abort_IT>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e04:	4610      	mov	r0, r2
 8003e06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e08:	e00e      	b.n	8003e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f990 	bl	8004130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	e00a      	b.n	8003e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f98c 	bl	8004130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	e006      	b.n	8003e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f988 	bl	8004130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e26:	e170      	b.n	800410a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	bf00      	nop
    return;
 8003e2a:	e16e      	b.n	800410a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	f040 814a 	bne.w	80040ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8143 	beq.w	80040ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 813c 	beq.w	80040ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	f040 80b4 	bne.w	8003fe0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8140 	beq.w	800410e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e96:	429a      	cmp	r2, r3
 8003e98:	f080 8139 	bcs.w	800410e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ea2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eae:	f000 8088 	beq.w	8003fc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ede:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1d9      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3314      	adds	r3, #20
 8003f04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3314      	adds	r3, #20
 8003f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e1      	bne.n	8003efe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3314      	adds	r3, #20
 8003f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e3      	bne.n	8003f3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f92:	f023 0310 	bic.w	r3, r3, #16
 8003f96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fa4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fa6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003faa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e3      	bne.n	8003f80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fd fde2 	bl	8001b86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8b6 	bl	8004144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fd8:	e099      	b.n	800410e <HAL_UART_IRQHandler+0x50e>
 8003fda:	bf00      	nop
 8003fdc:	0800437b 	.word	0x0800437b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 808b 	beq.w	8004112 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8086 	beq.w	8004112 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	330c      	adds	r3, #12
 800400c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004010:	e853 3f00 	ldrex	r3, [r3]
 8004014:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800401c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	330c      	adds	r3, #12
 8004026:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800402a:	647a      	str	r2, [r7, #68]	; 0x44
 800402c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e3      	bne.n	8004006 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	623b      	str	r3, [r7, #32]
   return(result);
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3314      	adds	r3, #20
 800405e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004062:	633a      	str	r2, [r7, #48]	; 0x30
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e3      	bne.n	800403e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	330c      	adds	r3, #12
 800408a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	60fb      	str	r3, [r7, #12]
   return(result);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0310 	bic.w	r3, r3, #16
 800409a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040a8:	61fa      	str	r2, [r7, #28]
 80040aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	69b9      	ldr	r1, [r7, #24]
 80040ae:	69fa      	ldr	r2, [r7, #28]
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	617b      	str	r3, [r7, #20]
   return(result);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e3      	bne.n	8004084 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f83e 	bl	8004144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040c8:	e023      	b.n	8004112 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <HAL_UART_IRQHandler+0x4ea>
 80040d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f95d 	bl	80043a2 <UART_Transmit_IT>
    return;
 80040e8:	e014      	b.n	8004114 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00e      	beq.n	8004114 <HAL_UART_IRQHandler+0x514>
 80040f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f99d 	bl	8004442 <UART_EndTransmit_IT>
    return;
 8004108:	e004      	b.n	8004114 <HAL_UART_IRQHandler+0x514>
    return;
 800410a:	bf00      	nop
 800410c:	e002      	b.n	8004114 <HAL_UART_IRQHandler+0x514>
      return;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HAL_UART_IRQHandler+0x514>
      return;
 8004112:	bf00      	nop
  }
}
 8004114:	37e8      	adds	r7, #232	; 0xe8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop

0800411c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b090      	sub	sp, #64	; 0x40
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416c:	e050      	b.n	8004210 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d04c      	beq.n	8004210 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <UART_WaitOnFlagUntilTimeout+0x30>
 800417c:	f7fd fbe6 	bl	800194c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004188:	429a      	cmp	r2, r3
 800418a:	d241      	bcs.n	8004210 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041ac:	637a      	str	r2, [r7, #52]	; 0x34
 80041ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e5      	bne.n	800418c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3314      	adds	r3, #20
 80041c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	613b      	str	r3, [r7, #16]
   return(result);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f023 0301 	bic.w	r3, r3, #1
 80041d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3314      	adds	r3, #20
 80041de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041e0:	623a      	str	r2, [r7, #32]
 80041e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	69f9      	ldr	r1, [r7, #28]
 80041e6:	6a3a      	ldr	r2, [r7, #32]
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e5      	bne.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e00f      	b.n	8004230 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	429a      	cmp	r2, r3
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	429a      	cmp	r2, r3
 800422c:	d09f      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3740      	adds	r7, #64	; 0x40
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	4613      	mov	r3, r2
 8004244:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2222      	movs	r2, #34	; 0x22
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004284:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695a      	ldr	r2, [r3, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f042 0201 	orr.w	r2, r2, #1
 8004294:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0220 	orr.w	r2, r2, #32
 80042a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b095      	sub	sp, #84	; 0x54
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042dc:	643a      	str	r2, [r7, #64]	; 0x40
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e5      	bne.n	80042bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3314      	adds	r3, #20
 80042f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f023 0301 	bic.w	r3, r3, #1
 8004306:	64bb      	str	r3, [r7, #72]	; 0x48
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3314      	adds	r3, #20
 800430e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004310:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e5      	bne.n	80042f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	2b01      	cmp	r3, #1
 800432a:	d119      	bne.n	8004360 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	60bb      	str	r3, [r7, #8]
   return(result);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800434c:	61ba      	str	r2, [r7, #24]
 800434e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	613b      	str	r3, [r7, #16]
   return(result);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800436e:	bf00      	nop
 8004370:	3754      	adds	r7, #84	; 0x54
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7ff fecb 	bl	8004130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b21      	cmp	r3, #33	; 0x21
 80043b4:	d13e      	bne.n	8004434 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043be:	d114      	bne.n	80043ea <UART_Transmit_IT+0x48>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d110      	bne.n	80043ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	1c9a      	adds	r2, r3, #2
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	621a      	str	r2, [r3, #32]
 80043e8:	e008      	b.n	80043fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	1c59      	adds	r1, r3, #1
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6211      	str	r1, [r2, #32]
 80043f4:	781a      	ldrb	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29b      	uxth	r3, r3
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4619      	mov	r1, r3
 800440a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10f      	bne.n	8004430 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800441e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800442e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004458:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fe5a 	bl	800411c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b08c      	sub	sp, #48	; 0x30
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b22      	cmp	r3, #34	; 0x22
 8004484:	f040 80ab 	bne.w	80045de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004490:	d117      	bne.n	80044c2 <UART_Receive_IT+0x50>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d113      	bne.n	80044c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	1c9a      	adds	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
 80044c0:	e026      	b.n	8004510 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d4:	d007      	beq.n	80044e6 <UART_Receive_IT+0x74>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <UART_Receive_IT+0x82>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e008      	b.n	8004506 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004500:	b2da      	uxtb	r2, r3
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29b      	uxth	r3, r3
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	4619      	mov	r1, r3
 800451e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004520:	2b00      	cmp	r3, #0
 8004522:	d15a      	bne.n	80045da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0220 	bic.w	r2, r2, #32
 8004532:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	2b01      	cmp	r3, #1
 8004562:	d135      	bne.n	80045d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	613b      	str	r3, [r7, #16]
   return(result);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f023 0310 	bic.w	r3, r3, #16
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458a:	623a      	str	r2, [r7, #32]
 800458c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	69f9      	ldr	r1, [r7, #28]
 8004590:	6a3a      	ldr	r2, [r7, #32]
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	61bb      	str	r3, [r7, #24]
   return(result);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e5      	bne.n	800456a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d10a      	bne.n	80045c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff fdbb 	bl	8004144 <HAL_UARTEx_RxEventCallback>
 80045ce:	e002      	b.n	80045d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fc ff1d 	bl	8001410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e002      	b.n	80045e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3730      	adds	r7, #48	; 0x30
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045ec:	b0c0      	sub	sp, #256	; 0x100
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004604:	68d9      	ldr	r1, [r3, #12]
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	ea40 0301 	orr.w	r3, r0, r1
 8004610:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	431a      	orrs	r2, r3
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	431a      	orrs	r2, r3
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004640:	f021 010c 	bic.w	r1, r1, #12
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800464e:	430b      	orrs	r3, r1
 8004650:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004662:	6999      	ldr	r1, [r3, #24]
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	ea40 0301 	orr.w	r3, r0, r1
 800466e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b8f      	ldr	r3, [pc, #572]	; (80048b4 <UART_SetConfig+0x2cc>)
 8004678:	429a      	cmp	r2, r3
 800467a:	d005      	beq.n	8004688 <UART_SetConfig+0xa0>
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b8d      	ldr	r3, [pc, #564]	; (80048b8 <UART_SetConfig+0x2d0>)
 8004684:	429a      	cmp	r2, r3
 8004686:	d104      	bne.n	8004692 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004688:	f7fe f95a 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 800468c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004690:	e003      	b.n	800469a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004692:	f7fe f941 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8004696:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a4:	f040 810c 	bne.w	80048c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046ba:	4622      	mov	r2, r4
 80046bc:	462b      	mov	r3, r5
 80046be:	1891      	adds	r1, r2, r2
 80046c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80046c2:	415b      	adcs	r3, r3
 80046c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046ca:	4621      	mov	r1, r4
 80046cc:	eb12 0801 	adds.w	r8, r2, r1
 80046d0:	4629      	mov	r1, r5
 80046d2:	eb43 0901 	adc.w	r9, r3, r1
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ea:	4690      	mov	r8, r2
 80046ec:	4699      	mov	r9, r3
 80046ee:	4623      	mov	r3, r4
 80046f0:	eb18 0303 	adds.w	r3, r8, r3
 80046f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046f8:	462b      	mov	r3, r5
 80046fa:	eb49 0303 	adc.w	r3, r9, r3
 80046fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800470e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004712:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004716:	460b      	mov	r3, r1
 8004718:	18db      	adds	r3, r3, r3
 800471a:	653b      	str	r3, [r7, #80]	; 0x50
 800471c:	4613      	mov	r3, r2
 800471e:	eb42 0303 	adc.w	r3, r2, r3
 8004722:	657b      	str	r3, [r7, #84]	; 0x54
 8004724:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004728:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800472c:	f7fb fdc8 	bl	80002c0 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4b61      	ldr	r3, [pc, #388]	; (80048bc <UART_SetConfig+0x2d4>)
 8004736:	fba3 2302 	umull	r2, r3, r3, r2
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	011c      	lsls	r4, r3, #4
 800473e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004742:	2200      	movs	r2, #0
 8004744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004748:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800474c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	1891      	adds	r1, r2, r2
 8004756:	64b9      	str	r1, [r7, #72]	; 0x48
 8004758:	415b      	adcs	r3, r3
 800475a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800475c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004760:	4641      	mov	r1, r8
 8004762:	eb12 0a01 	adds.w	sl, r2, r1
 8004766:	4649      	mov	r1, r9
 8004768:	eb43 0b01 	adc.w	fp, r3, r1
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004778:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800477c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004780:	4692      	mov	sl, r2
 8004782:	469b      	mov	fp, r3
 8004784:	4643      	mov	r3, r8
 8004786:	eb1a 0303 	adds.w	r3, sl, r3
 800478a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800478e:	464b      	mov	r3, r9
 8004790:	eb4b 0303 	adc.w	r3, fp, r3
 8004794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047ac:	460b      	mov	r3, r1
 80047ae:	18db      	adds	r3, r3, r3
 80047b0:	643b      	str	r3, [r7, #64]	; 0x40
 80047b2:	4613      	mov	r3, r2
 80047b4:	eb42 0303 	adc.w	r3, r2, r3
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047c2:	f7fb fd7d 	bl	80002c0 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	4b3b      	ldr	r3, [pc, #236]	; (80048bc <UART_SetConfig+0x2d4>)
 80047ce:	fba3 2301 	umull	r2, r3, r3, r1
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	2264      	movs	r2, #100	; 0x64
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	1acb      	subs	r3, r1, r3
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047e2:	4b36      	ldr	r3, [pc, #216]	; (80048bc <UART_SetConfig+0x2d4>)
 80047e4:	fba3 2302 	umull	r2, r3, r3, r2
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047f0:	441c      	add	r4, r3
 80047f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004800:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004804:	4642      	mov	r2, r8
 8004806:	464b      	mov	r3, r9
 8004808:	1891      	adds	r1, r2, r2
 800480a:	63b9      	str	r1, [r7, #56]	; 0x38
 800480c:	415b      	adcs	r3, r3
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004810:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004814:	4641      	mov	r1, r8
 8004816:	1851      	adds	r1, r2, r1
 8004818:	6339      	str	r1, [r7, #48]	; 0x30
 800481a:	4649      	mov	r1, r9
 800481c:	414b      	adcs	r3, r1
 800481e:	637b      	str	r3, [r7, #52]	; 0x34
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800482c:	4659      	mov	r1, fp
 800482e:	00cb      	lsls	r3, r1, #3
 8004830:	4651      	mov	r1, sl
 8004832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004836:	4651      	mov	r1, sl
 8004838:	00ca      	lsls	r2, r1, #3
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	4603      	mov	r3, r0
 8004840:	4642      	mov	r2, r8
 8004842:	189b      	adds	r3, r3, r2
 8004844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004848:	464b      	mov	r3, r9
 800484a:	460a      	mov	r2, r1
 800484c:	eb42 0303 	adc.w	r3, r2, r3
 8004850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004860:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004864:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004868:	460b      	mov	r3, r1
 800486a:	18db      	adds	r3, r3, r3
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
 800486e:	4613      	mov	r3, r2
 8004870:	eb42 0303 	adc.w	r3, r2, r3
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004876:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800487a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800487e:	f7fb fd1f 	bl	80002c0 <__aeabi_uldivmod>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <UART_SetConfig+0x2d4>)
 8004888:	fba3 1302 	umull	r1, r3, r3, r2
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	2164      	movs	r1, #100	; 0x64
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	3332      	adds	r3, #50	; 0x32
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <UART_SetConfig+0x2d4>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	f003 0207 	and.w	r2, r3, #7
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4422      	add	r2, r4
 80048ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048b0:	e105      	b.n	8004abe <UART_SetConfig+0x4d6>
 80048b2:	bf00      	nop
 80048b4:	40011000 	.word	0x40011000
 80048b8:	40011400 	.word	0x40011400
 80048bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c4:	2200      	movs	r2, #0
 80048c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048d2:	4642      	mov	r2, r8
 80048d4:	464b      	mov	r3, r9
 80048d6:	1891      	adds	r1, r2, r2
 80048d8:	6239      	str	r1, [r7, #32]
 80048da:	415b      	adcs	r3, r3
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
 80048de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048e2:	4641      	mov	r1, r8
 80048e4:	1854      	adds	r4, r2, r1
 80048e6:	4649      	mov	r1, r9
 80048e8:	eb43 0501 	adc.w	r5, r3, r1
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	00eb      	lsls	r3, r5, #3
 80048f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048fa:	00e2      	lsls	r2, r4, #3
 80048fc:	4614      	mov	r4, r2
 80048fe:	461d      	mov	r5, r3
 8004900:	4643      	mov	r3, r8
 8004902:	18e3      	adds	r3, r4, r3
 8004904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004908:	464b      	mov	r3, r9
 800490a:	eb45 0303 	adc.w	r3, r5, r3
 800490e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800491e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800492e:	4629      	mov	r1, r5
 8004930:	008b      	lsls	r3, r1, #2
 8004932:	4621      	mov	r1, r4
 8004934:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004938:	4621      	mov	r1, r4
 800493a:	008a      	lsls	r2, r1, #2
 800493c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004940:	f7fb fcbe 	bl	80002c0 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4b60      	ldr	r3, [pc, #384]	; (8004acc <UART_SetConfig+0x4e4>)
 800494a:	fba3 2302 	umull	r2, r3, r3, r2
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	011c      	lsls	r4, r3, #4
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800495c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004960:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	1891      	adds	r1, r2, r2
 800496a:	61b9      	str	r1, [r7, #24]
 800496c:	415b      	adcs	r3, r3
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004974:	4641      	mov	r1, r8
 8004976:	1851      	adds	r1, r2, r1
 8004978:	6139      	str	r1, [r7, #16]
 800497a:	4649      	mov	r1, r9
 800497c:	414b      	adcs	r3, r1
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800498c:	4659      	mov	r1, fp
 800498e:	00cb      	lsls	r3, r1, #3
 8004990:	4651      	mov	r1, sl
 8004992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004996:	4651      	mov	r1, sl
 8004998:	00ca      	lsls	r2, r1, #3
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	4642      	mov	r2, r8
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049a8:	464b      	mov	r3, r9
 80049aa:	460a      	mov	r2, r1
 80049ac:	eb42 0303 	adc.w	r3, r2, r3
 80049b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80049be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049cc:	4649      	mov	r1, r9
 80049ce:	008b      	lsls	r3, r1, #2
 80049d0:	4641      	mov	r1, r8
 80049d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d6:	4641      	mov	r1, r8
 80049d8:	008a      	lsls	r2, r1, #2
 80049da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049de:	f7fb fc6f 	bl	80002c0 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4b39      	ldr	r3, [pc, #228]	; (8004acc <UART_SetConfig+0x4e4>)
 80049e8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	2164      	movs	r1, #100	; 0x64
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	3332      	adds	r3, #50	; 0x32
 80049fa:	4a34      	ldr	r2, [pc, #208]	; (8004acc <UART_SetConfig+0x4e4>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a06:	441c      	add	r4, r3
 8004a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a10:	677a      	str	r2, [r7, #116]	; 0x74
 8004a12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a16:	4642      	mov	r2, r8
 8004a18:	464b      	mov	r3, r9
 8004a1a:	1891      	adds	r1, r2, r2
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	415b      	adcs	r3, r3
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a26:	4641      	mov	r1, r8
 8004a28:	1851      	adds	r1, r2, r1
 8004a2a:	6039      	str	r1, [r7, #0]
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	414b      	adcs	r3, r1
 8004a30:	607b      	str	r3, [r7, #4]
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a3e:	4659      	mov	r1, fp
 8004a40:	00cb      	lsls	r3, r1, #3
 8004a42:	4651      	mov	r1, sl
 8004a44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a48:	4651      	mov	r1, sl
 8004a4a:	00ca      	lsls	r2, r1, #3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4603      	mov	r3, r0
 8004a52:	4642      	mov	r2, r8
 8004a54:	189b      	adds	r3, r3, r2
 8004a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a58:	464b      	mov	r3, r9
 8004a5a:	460a      	mov	r2, r1
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a6c:	667a      	str	r2, [r7, #100]	; 0x64
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	008b      	lsls	r3, r1, #2
 8004a7e:	4641      	mov	r1, r8
 8004a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a84:	4641      	mov	r1, r8
 8004a86:	008a      	lsls	r2, r1, #2
 8004a88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a8c:	f7fb fc18 	bl	80002c0 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <UART_SetConfig+0x4e4>)
 8004a96:	fba3 1302 	umull	r1, r3, r3, r2
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2164      	movs	r1, #100	; 0x64
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	3332      	adds	r3, #50	; 0x32
 8004aa8:	4a08      	ldr	r2, [pc, #32]	; (8004acc <UART_SetConfig+0x4e4>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4422      	add	r2, r4
 8004abc:	609a      	str	r2, [r3, #8]
}
 8004abe:	bf00      	nop
 8004ac0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aca:	bf00      	nop
 8004acc:	51eb851f 	.word	0x51eb851f

08004ad0 <atoi>:
 8004ad0:	220a      	movs	r2, #10
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	f000 b9da 	b.w	8004e8c <strtol>

08004ad8 <__errno>:
 8004ad8:	4b01      	ldr	r3, [pc, #4]	; (8004ae0 <__errno+0x8>)
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	2000000c 	.word	0x2000000c

08004ae4 <__libc_init_array>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	4d0d      	ldr	r5, [pc, #52]	; (8004b1c <__libc_init_array+0x38>)
 8004ae8:	4c0d      	ldr	r4, [pc, #52]	; (8004b20 <__libc_init_array+0x3c>)
 8004aea:	1b64      	subs	r4, r4, r5
 8004aec:	10a4      	asrs	r4, r4, #2
 8004aee:	2600      	movs	r6, #0
 8004af0:	42a6      	cmp	r6, r4
 8004af2:	d109      	bne.n	8004b08 <__libc_init_array+0x24>
 8004af4:	4d0b      	ldr	r5, [pc, #44]	; (8004b24 <__libc_init_array+0x40>)
 8004af6:	4c0c      	ldr	r4, [pc, #48]	; (8004b28 <__libc_init_array+0x44>)
 8004af8:	f001 fb88 	bl	800620c <_init>
 8004afc:	1b64      	subs	r4, r4, r5
 8004afe:	10a4      	asrs	r4, r4, #2
 8004b00:	2600      	movs	r6, #0
 8004b02:	42a6      	cmp	r6, r4
 8004b04:	d105      	bne.n	8004b12 <__libc_init_array+0x2e>
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0c:	4798      	blx	r3
 8004b0e:	3601      	adds	r6, #1
 8004b10:	e7ee      	b.n	8004af0 <__libc_init_array+0xc>
 8004b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b16:	4798      	blx	r3
 8004b18:	3601      	adds	r6, #1
 8004b1a:	e7f2      	b.n	8004b02 <__libc_init_array+0x1e>
 8004b1c:	080066d0 	.word	0x080066d0
 8004b20:	080066d0 	.word	0x080066d0
 8004b24:	080066d0 	.word	0x080066d0
 8004b28:	080066d4 	.word	0x080066d4

08004b2c <memset>:
 8004b2c:	4402      	add	r2, r0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d100      	bne.n	8004b36 <memset+0xa>
 8004b34:	4770      	bx	lr
 8004b36:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3a:	e7f9      	b.n	8004b30 <memset+0x4>

08004b3c <iprintf>:
 8004b3c:	b40f      	push	{r0, r1, r2, r3}
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <iprintf+0x2c>)
 8004b40:	b513      	push	{r0, r1, r4, lr}
 8004b42:	681c      	ldr	r4, [r3, #0]
 8004b44:	b124      	cbz	r4, 8004b50 <iprintf+0x14>
 8004b46:	69a3      	ldr	r3, [r4, #24]
 8004b48:	b913      	cbnz	r3, 8004b50 <iprintf+0x14>
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f000 fba0 	bl	8005290 <__sinit>
 8004b50:	ab05      	add	r3, sp, #20
 8004b52:	9a04      	ldr	r2, [sp, #16]
 8004b54:	68a1      	ldr	r1, [r4, #8]
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f000 ff1f 	bl	800599c <_vfiprintf_r>
 8004b5e:	b002      	add	sp, #8
 8004b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b64:	b004      	add	sp, #16
 8004b66:	4770      	bx	lr
 8004b68:	2000000c 	.word	0x2000000c

08004b6c <_puts_r>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	460e      	mov	r6, r1
 8004b70:	4605      	mov	r5, r0
 8004b72:	b118      	cbz	r0, 8004b7c <_puts_r+0x10>
 8004b74:	6983      	ldr	r3, [r0, #24]
 8004b76:	b90b      	cbnz	r3, 8004b7c <_puts_r+0x10>
 8004b78:	f000 fb8a 	bl	8005290 <__sinit>
 8004b7c:	69ab      	ldr	r3, [r5, #24]
 8004b7e:	68ac      	ldr	r4, [r5, #8]
 8004b80:	b913      	cbnz	r3, 8004b88 <_puts_r+0x1c>
 8004b82:	4628      	mov	r0, r5
 8004b84:	f000 fb84 	bl	8005290 <__sinit>
 8004b88:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <_puts_r+0xd0>)
 8004b8a:	429c      	cmp	r4, r3
 8004b8c:	d120      	bne.n	8004bd0 <_puts_r+0x64>
 8004b8e:	686c      	ldr	r4, [r5, #4]
 8004b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b92:	07db      	lsls	r3, r3, #31
 8004b94:	d405      	bmi.n	8004ba2 <_puts_r+0x36>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	0598      	lsls	r0, r3, #22
 8004b9a:	d402      	bmi.n	8004ba2 <_puts_r+0x36>
 8004b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b9e:	f000 fc27 	bl	80053f0 <__retarget_lock_acquire_recursive>
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	0719      	lsls	r1, r3, #28
 8004ba6:	d51d      	bpl.n	8004be4 <_puts_r+0x78>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	b1db      	cbz	r3, 8004be4 <_puts_r+0x78>
 8004bac:	3e01      	subs	r6, #1
 8004bae:	68a3      	ldr	r3, [r4, #8]
 8004bb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	60a3      	str	r3, [r4, #8]
 8004bb8:	bb39      	cbnz	r1, 8004c0a <_puts_r+0x9e>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	da38      	bge.n	8004c30 <_puts_r+0xc4>
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	210a      	movs	r1, #10
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	f000 f96c 	bl	8004ea0 <__swbuf_r>
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d011      	beq.n	8004bf0 <_puts_r+0x84>
 8004bcc:	250a      	movs	r5, #10
 8004bce:	e011      	b.n	8004bf4 <_puts_r+0x88>
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <_puts_r+0xd4>)
 8004bd2:	429c      	cmp	r4, r3
 8004bd4:	d101      	bne.n	8004bda <_puts_r+0x6e>
 8004bd6:	68ac      	ldr	r4, [r5, #8]
 8004bd8:	e7da      	b.n	8004b90 <_puts_r+0x24>
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <_puts_r+0xd8>)
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	bf08      	it	eq
 8004be0:	68ec      	ldreq	r4, [r5, #12]
 8004be2:	e7d5      	b.n	8004b90 <_puts_r+0x24>
 8004be4:	4621      	mov	r1, r4
 8004be6:	4628      	mov	r0, r5
 8004be8:	f000 f9ac 	bl	8004f44 <__swsetup_r>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d0dd      	beq.n	8004bac <_puts_r+0x40>
 8004bf0:	f04f 35ff 	mov.w	r5, #4294967295
 8004bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bf6:	07da      	lsls	r2, r3, #31
 8004bf8:	d405      	bmi.n	8004c06 <_puts_r+0x9a>
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	059b      	lsls	r3, r3, #22
 8004bfe:	d402      	bmi.n	8004c06 <_puts_r+0x9a>
 8004c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c02:	f000 fbf6 	bl	80053f2 <__retarget_lock_release_recursive>
 8004c06:	4628      	mov	r0, r5
 8004c08:	bd70      	pop	{r4, r5, r6, pc}
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	da04      	bge.n	8004c18 <_puts_r+0xac>
 8004c0e:	69a2      	ldr	r2, [r4, #24]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	dc06      	bgt.n	8004c22 <_puts_r+0xb6>
 8004c14:	290a      	cmp	r1, #10
 8004c16:	d004      	beq.n	8004c22 <_puts_r+0xb6>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	6022      	str	r2, [r4, #0]
 8004c1e:	7019      	strb	r1, [r3, #0]
 8004c20:	e7c5      	b.n	8004bae <_puts_r+0x42>
 8004c22:	4622      	mov	r2, r4
 8004c24:	4628      	mov	r0, r5
 8004c26:	f000 f93b 	bl	8004ea0 <__swbuf_r>
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d1bf      	bne.n	8004bae <_puts_r+0x42>
 8004c2e:	e7df      	b.n	8004bf0 <_puts_r+0x84>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	250a      	movs	r5, #10
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	6022      	str	r2, [r4, #0]
 8004c38:	701d      	strb	r5, [r3, #0]
 8004c3a:	e7db      	b.n	8004bf4 <_puts_r+0x88>
 8004c3c:	08006654 	.word	0x08006654
 8004c40:	08006674 	.word	0x08006674
 8004c44:	08006634 	.word	0x08006634

08004c48 <puts>:
 8004c48:	4b02      	ldr	r3, [pc, #8]	; (8004c54 <puts+0xc>)
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	f7ff bf8d 	b.w	8004b6c <_puts_r>
 8004c52:	bf00      	nop
 8004c54:	2000000c 	.word	0x2000000c

08004c58 <siprintf>:
 8004c58:	b40e      	push	{r1, r2, r3}
 8004c5a:	b500      	push	{lr}
 8004c5c:	b09c      	sub	sp, #112	; 0x70
 8004c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c60:	9002      	str	r0, [sp, #8]
 8004c62:	9006      	str	r0, [sp, #24]
 8004c64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c68:	4809      	ldr	r0, [pc, #36]	; (8004c90 <siprintf+0x38>)
 8004c6a:	9107      	str	r1, [sp, #28]
 8004c6c:	9104      	str	r1, [sp, #16]
 8004c6e:	4909      	ldr	r1, [pc, #36]	; (8004c94 <siprintf+0x3c>)
 8004c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c74:	9105      	str	r1, [sp, #20]
 8004c76:	6800      	ldr	r0, [r0, #0]
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	a902      	add	r1, sp, #8
 8004c7c:	f000 fd64 	bl	8005748 <_svfiprintf_r>
 8004c80:	9b02      	ldr	r3, [sp, #8]
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	b01c      	add	sp, #112	; 0x70
 8004c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c8c:	b003      	add	sp, #12
 8004c8e:	4770      	bx	lr
 8004c90:	2000000c 	.word	0x2000000c
 8004c94:	ffff0208 	.word	0xffff0208

08004c98 <strcpy>:
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c9e:	f803 2b01 	strb.w	r2, [r3], #1
 8004ca2:	2a00      	cmp	r2, #0
 8004ca4:	d1f9      	bne.n	8004c9a <strcpy+0x2>
 8004ca6:	4770      	bx	lr

08004ca8 <strncmp>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	b17a      	cbz	r2, 8004ccc <strncmp+0x24>
 8004cac:	4603      	mov	r3, r0
 8004cae:	3901      	subs	r1, #1
 8004cb0:	1884      	adds	r4, r0, r2
 8004cb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004cb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004cba:	4290      	cmp	r0, r2
 8004cbc:	d101      	bne.n	8004cc2 <strncmp+0x1a>
 8004cbe:	42a3      	cmp	r3, r4
 8004cc0:	d101      	bne.n	8004cc6 <strncmp+0x1e>
 8004cc2:	1a80      	subs	r0, r0, r2
 8004cc4:	bd10      	pop	{r4, pc}
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d1f3      	bne.n	8004cb2 <strncmp+0xa>
 8004cca:	e7fa      	b.n	8004cc2 <strncmp+0x1a>
 8004ccc:	4610      	mov	r0, r2
 8004cce:	e7f9      	b.n	8004cc4 <strncmp+0x1c>

08004cd0 <strtok>:
 8004cd0:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <strtok+0x5c>)
 8004cd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cd4:	681e      	ldr	r6, [r3, #0]
 8004cd6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004cd8:	4605      	mov	r5, r0
 8004cda:	b9fc      	cbnz	r4, 8004d1c <strtok+0x4c>
 8004cdc:	2050      	movs	r0, #80	; 0x50
 8004cde:	9101      	str	r1, [sp, #4]
 8004ce0:	f000 fbee 	bl	80054c0 <malloc>
 8004ce4:	9901      	ldr	r1, [sp, #4]
 8004ce6:	65b0      	str	r0, [r6, #88]	; 0x58
 8004ce8:	4602      	mov	r2, r0
 8004cea:	b920      	cbnz	r0, 8004cf6 <strtok+0x26>
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <strtok+0x60>)
 8004cee:	4811      	ldr	r0, [pc, #68]	; (8004d34 <strtok+0x64>)
 8004cf0:	2157      	movs	r1, #87	; 0x57
 8004cf2:	f000 f995 	bl	8005020 <__assert_func>
 8004cf6:	e9c0 4400 	strd	r4, r4, [r0]
 8004cfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004cfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004d02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004d06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004d0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004d0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004d12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004d16:	6184      	str	r4, [r0, #24]
 8004d18:	7704      	strb	r4, [r0, #28]
 8004d1a:	6244      	str	r4, [r0, #36]	; 0x24
 8004d1c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4628      	mov	r0, r5
 8004d22:	b002      	add	sp, #8
 8004d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d28:	f000 b806 	b.w	8004d38 <__strtok_r>
 8004d2c:	2000000c 	.word	0x2000000c
 8004d30:	08006480 	.word	0x08006480
 8004d34:	08006497 	.word	0x08006497

08004d38 <__strtok_r>:
 8004d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3a:	b908      	cbnz	r0, 8004d40 <__strtok_r+0x8>
 8004d3c:	6810      	ldr	r0, [r2, #0]
 8004d3e:	b188      	cbz	r0, 8004d64 <__strtok_r+0x2c>
 8004d40:	4604      	mov	r4, r0
 8004d42:	4620      	mov	r0, r4
 8004d44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004d48:	460f      	mov	r7, r1
 8004d4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004d4e:	b91e      	cbnz	r6, 8004d58 <__strtok_r+0x20>
 8004d50:	b965      	cbnz	r5, 8004d6c <__strtok_r+0x34>
 8004d52:	6015      	str	r5, [r2, #0]
 8004d54:	4628      	mov	r0, r5
 8004d56:	e005      	b.n	8004d64 <__strtok_r+0x2c>
 8004d58:	42b5      	cmp	r5, r6
 8004d5a:	d1f6      	bne.n	8004d4a <__strtok_r+0x12>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1f0      	bne.n	8004d42 <__strtok_r+0xa>
 8004d60:	6014      	str	r4, [r2, #0]
 8004d62:	7003      	strb	r3, [r0, #0]
 8004d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d66:	461c      	mov	r4, r3
 8004d68:	e00c      	b.n	8004d84 <__strtok_r+0x4c>
 8004d6a:	b915      	cbnz	r5, 8004d72 <__strtok_r+0x3a>
 8004d6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004d70:	460e      	mov	r6, r1
 8004d72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004d76:	42ab      	cmp	r3, r5
 8004d78:	d1f7      	bne.n	8004d6a <__strtok_r+0x32>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f3      	beq.n	8004d66 <__strtok_r+0x2e>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004d84:	6014      	str	r4, [r2, #0]
 8004d86:	e7ed      	b.n	8004d64 <__strtok_r+0x2c>

08004d88 <_strtol_l.constprop.0>:
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d8e:	d001      	beq.n	8004d94 <_strtol_l.constprop.0+0xc>
 8004d90:	2b24      	cmp	r3, #36	; 0x24
 8004d92:	d906      	bls.n	8004da2 <_strtol_l.constprop.0+0x1a>
 8004d94:	f7ff fea0 	bl	8004ad8 <__errno>
 8004d98:	2316      	movs	r3, #22
 8004d9a:	6003      	str	r3, [r0, #0]
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004e88 <_strtol_l.constprop.0+0x100>
 8004da6:	460d      	mov	r5, r1
 8004da8:	462e      	mov	r6, r5
 8004daa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dae:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004db2:	f017 0708 	ands.w	r7, r7, #8
 8004db6:	d1f7      	bne.n	8004da8 <_strtol_l.constprop.0+0x20>
 8004db8:	2c2d      	cmp	r4, #45	; 0x2d
 8004dba:	d132      	bne.n	8004e22 <_strtol_l.constprop.0+0x9a>
 8004dbc:	782c      	ldrb	r4, [r5, #0]
 8004dbe:	2701      	movs	r7, #1
 8004dc0:	1cb5      	adds	r5, r6, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d05b      	beq.n	8004e7e <_strtol_l.constprop.0+0xf6>
 8004dc6:	2b10      	cmp	r3, #16
 8004dc8:	d109      	bne.n	8004dde <_strtol_l.constprop.0+0x56>
 8004dca:	2c30      	cmp	r4, #48	; 0x30
 8004dcc:	d107      	bne.n	8004dde <_strtol_l.constprop.0+0x56>
 8004dce:	782c      	ldrb	r4, [r5, #0]
 8004dd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004dd4:	2c58      	cmp	r4, #88	; 0x58
 8004dd6:	d14d      	bne.n	8004e74 <_strtol_l.constprop.0+0xec>
 8004dd8:	786c      	ldrb	r4, [r5, #1]
 8004dda:	2310      	movs	r3, #16
 8004ddc:	3502      	adds	r5, #2
 8004dde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004de2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004de6:	f04f 0c00 	mov.w	ip, #0
 8004dea:	fbb8 f9f3 	udiv	r9, r8, r3
 8004dee:	4666      	mov	r6, ip
 8004df0:	fb03 8a19 	mls	sl, r3, r9, r8
 8004df4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004df8:	f1be 0f09 	cmp.w	lr, #9
 8004dfc:	d816      	bhi.n	8004e2c <_strtol_l.constprop.0+0xa4>
 8004dfe:	4674      	mov	r4, lr
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	dd24      	ble.n	8004e4e <_strtol_l.constprop.0+0xc6>
 8004e04:	f1bc 0f00 	cmp.w	ip, #0
 8004e08:	db1e      	blt.n	8004e48 <_strtol_l.constprop.0+0xc0>
 8004e0a:	45b1      	cmp	r9, r6
 8004e0c:	d31c      	bcc.n	8004e48 <_strtol_l.constprop.0+0xc0>
 8004e0e:	d101      	bne.n	8004e14 <_strtol_l.constprop.0+0x8c>
 8004e10:	45a2      	cmp	sl, r4
 8004e12:	db19      	blt.n	8004e48 <_strtol_l.constprop.0+0xc0>
 8004e14:	fb06 4603 	mla	r6, r6, r3, r4
 8004e18:	f04f 0c01 	mov.w	ip, #1
 8004e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e20:	e7e8      	b.n	8004df4 <_strtol_l.constprop.0+0x6c>
 8004e22:	2c2b      	cmp	r4, #43	; 0x2b
 8004e24:	bf04      	itt	eq
 8004e26:	782c      	ldrbeq	r4, [r5, #0]
 8004e28:	1cb5      	addeq	r5, r6, #2
 8004e2a:	e7ca      	b.n	8004dc2 <_strtol_l.constprop.0+0x3a>
 8004e2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004e30:	f1be 0f19 	cmp.w	lr, #25
 8004e34:	d801      	bhi.n	8004e3a <_strtol_l.constprop.0+0xb2>
 8004e36:	3c37      	subs	r4, #55	; 0x37
 8004e38:	e7e2      	b.n	8004e00 <_strtol_l.constprop.0+0x78>
 8004e3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004e3e:	f1be 0f19 	cmp.w	lr, #25
 8004e42:	d804      	bhi.n	8004e4e <_strtol_l.constprop.0+0xc6>
 8004e44:	3c57      	subs	r4, #87	; 0x57
 8004e46:	e7db      	b.n	8004e00 <_strtol_l.constprop.0+0x78>
 8004e48:	f04f 3cff 	mov.w	ip, #4294967295
 8004e4c:	e7e6      	b.n	8004e1c <_strtol_l.constprop.0+0x94>
 8004e4e:	f1bc 0f00 	cmp.w	ip, #0
 8004e52:	da05      	bge.n	8004e60 <_strtol_l.constprop.0+0xd8>
 8004e54:	2322      	movs	r3, #34	; 0x22
 8004e56:	6003      	str	r3, [r0, #0]
 8004e58:	4646      	mov	r6, r8
 8004e5a:	b942      	cbnz	r2, 8004e6e <_strtol_l.constprop.0+0xe6>
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	e79e      	b.n	8004d9e <_strtol_l.constprop.0+0x16>
 8004e60:	b107      	cbz	r7, 8004e64 <_strtol_l.constprop.0+0xdc>
 8004e62:	4276      	negs	r6, r6
 8004e64:	2a00      	cmp	r2, #0
 8004e66:	d0f9      	beq.n	8004e5c <_strtol_l.constprop.0+0xd4>
 8004e68:	f1bc 0f00 	cmp.w	ip, #0
 8004e6c:	d000      	beq.n	8004e70 <_strtol_l.constprop.0+0xe8>
 8004e6e:	1e69      	subs	r1, r5, #1
 8004e70:	6011      	str	r1, [r2, #0]
 8004e72:	e7f3      	b.n	8004e5c <_strtol_l.constprop.0+0xd4>
 8004e74:	2430      	movs	r4, #48	; 0x30
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1b1      	bne.n	8004dde <_strtol_l.constprop.0+0x56>
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	e7af      	b.n	8004dde <_strtol_l.constprop.0+0x56>
 8004e7e:	2c30      	cmp	r4, #48	; 0x30
 8004e80:	d0a5      	beq.n	8004dce <_strtol_l.constprop.0+0x46>
 8004e82:	230a      	movs	r3, #10
 8004e84:	e7ab      	b.n	8004dde <_strtol_l.constprop.0+0x56>
 8004e86:	bf00      	nop
 8004e88:	08006531 	.word	0x08006531

08004e8c <strtol>:
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	460a      	mov	r2, r1
 8004e90:	4601      	mov	r1, r0
 8004e92:	4802      	ldr	r0, [pc, #8]	; (8004e9c <strtol+0x10>)
 8004e94:	6800      	ldr	r0, [r0, #0]
 8004e96:	f7ff bf77 	b.w	8004d88 <_strtol_l.constprop.0>
 8004e9a:	bf00      	nop
 8004e9c:	2000000c 	.word	0x2000000c

08004ea0 <__swbuf_r>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	460e      	mov	r6, r1
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	b118      	cbz	r0, 8004eb2 <__swbuf_r+0x12>
 8004eaa:	6983      	ldr	r3, [r0, #24]
 8004eac:	b90b      	cbnz	r3, 8004eb2 <__swbuf_r+0x12>
 8004eae:	f000 f9ef 	bl	8005290 <__sinit>
 8004eb2:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <__swbuf_r+0x98>)
 8004eb4:	429c      	cmp	r4, r3
 8004eb6:	d12b      	bne.n	8004f10 <__swbuf_r+0x70>
 8004eb8:	686c      	ldr	r4, [r5, #4]
 8004eba:	69a3      	ldr	r3, [r4, #24]
 8004ebc:	60a3      	str	r3, [r4, #8]
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	071a      	lsls	r2, r3, #28
 8004ec2:	d52f      	bpl.n	8004f24 <__swbuf_r+0x84>
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	b36b      	cbz	r3, 8004f24 <__swbuf_r+0x84>
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	1ac0      	subs	r0, r0, r3
 8004ece:	6963      	ldr	r3, [r4, #20]
 8004ed0:	b2f6      	uxtb	r6, r6
 8004ed2:	4283      	cmp	r3, r0
 8004ed4:	4637      	mov	r7, r6
 8004ed6:	dc04      	bgt.n	8004ee2 <__swbuf_r+0x42>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 f944 	bl	8005168 <_fflush_r>
 8004ee0:	bb30      	cbnz	r0, 8004f30 <__swbuf_r+0x90>
 8004ee2:	68a3      	ldr	r3, [r4, #8]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	60a3      	str	r3, [r4, #8]
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	6022      	str	r2, [r4, #0]
 8004eee:	701e      	strb	r6, [r3, #0]
 8004ef0:	6963      	ldr	r3, [r4, #20]
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	4283      	cmp	r3, r0
 8004ef6:	d004      	beq.n	8004f02 <__swbuf_r+0x62>
 8004ef8:	89a3      	ldrh	r3, [r4, #12]
 8004efa:	07db      	lsls	r3, r3, #31
 8004efc:	d506      	bpl.n	8004f0c <__swbuf_r+0x6c>
 8004efe:	2e0a      	cmp	r6, #10
 8004f00:	d104      	bne.n	8004f0c <__swbuf_r+0x6c>
 8004f02:	4621      	mov	r1, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	f000 f92f 	bl	8005168 <_fflush_r>
 8004f0a:	b988      	cbnz	r0, 8004f30 <__swbuf_r+0x90>
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <__swbuf_r+0x9c>)
 8004f12:	429c      	cmp	r4, r3
 8004f14:	d101      	bne.n	8004f1a <__swbuf_r+0x7a>
 8004f16:	68ac      	ldr	r4, [r5, #8]
 8004f18:	e7cf      	b.n	8004eba <__swbuf_r+0x1a>
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <__swbuf_r+0xa0>)
 8004f1c:	429c      	cmp	r4, r3
 8004f1e:	bf08      	it	eq
 8004f20:	68ec      	ldreq	r4, [r5, #12]
 8004f22:	e7ca      	b.n	8004eba <__swbuf_r+0x1a>
 8004f24:	4621      	mov	r1, r4
 8004f26:	4628      	mov	r0, r5
 8004f28:	f000 f80c 	bl	8004f44 <__swsetup_r>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d0cb      	beq.n	8004ec8 <__swbuf_r+0x28>
 8004f30:	f04f 37ff 	mov.w	r7, #4294967295
 8004f34:	e7ea      	b.n	8004f0c <__swbuf_r+0x6c>
 8004f36:	bf00      	nop
 8004f38:	08006654 	.word	0x08006654
 8004f3c:	08006674 	.word	0x08006674
 8004f40:	08006634 	.word	0x08006634

08004f44 <__swsetup_r>:
 8004f44:	4b32      	ldr	r3, [pc, #200]	; (8005010 <__swsetup_r+0xcc>)
 8004f46:	b570      	push	{r4, r5, r6, lr}
 8004f48:	681d      	ldr	r5, [r3, #0]
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	b125      	cbz	r5, 8004f5a <__swsetup_r+0x16>
 8004f50:	69ab      	ldr	r3, [r5, #24]
 8004f52:	b913      	cbnz	r3, 8004f5a <__swsetup_r+0x16>
 8004f54:	4628      	mov	r0, r5
 8004f56:	f000 f99b 	bl	8005290 <__sinit>
 8004f5a:	4b2e      	ldr	r3, [pc, #184]	; (8005014 <__swsetup_r+0xd0>)
 8004f5c:	429c      	cmp	r4, r3
 8004f5e:	d10f      	bne.n	8004f80 <__swsetup_r+0x3c>
 8004f60:	686c      	ldr	r4, [r5, #4]
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f68:	0719      	lsls	r1, r3, #28
 8004f6a:	d42c      	bmi.n	8004fc6 <__swsetup_r+0x82>
 8004f6c:	06dd      	lsls	r5, r3, #27
 8004f6e:	d411      	bmi.n	8004f94 <__swsetup_r+0x50>
 8004f70:	2309      	movs	r3, #9
 8004f72:	6033      	str	r3, [r6, #0]
 8004f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7e:	e03e      	b.n	8004ffe <__swsetup_r+0xba>
 8004f80:	4b25      	ldr	r3, [pc, #148]	; (8005018 <__swsetup_r+0xd4>)
 8004f82:	429c      	cmp	r4, r3
 8004f84:	d101      	bne.n	8004f8a <__swsetup_r+0x46>
 8004f86:	68ac      	ldr	r4, [r5, #8]
 8004f88:	e7eb      	b.n	8004f62 <__swsetup_r+0x1e>
 8004f8a:	4b24      	ldr	r3, [pc, #144]	; (800501c <__swsetup_r+0xd8>)
 8004f8c:	429c      	cmp	r4, r3
 8004f8e:	bf08      	it	eq
 8004f90:	68ec      	ldreq	r4, [r5, #12]
 8004f92:	e7e6      	b.n	8004f62 <__swsetup_r+0x1e>
 8004f94:	0758      	lsls	r0, r3, #29
 8004f96:	d512      	bpl.n	8004fbe <__swsetup_r+0x7a>
 8004f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f9a:	b141      	cbz	r1, 8004fae <__swsetup_r+0x6a>
 8004f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	d002      	beq.n	8004faa <__swsetup_r+0x66>
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f000 fa93 	bl	80054d0 <_free_r>
 8004faa:	2300      	movs	r3, #0
 8004fac:	6363      	str	r3, [r4, #52]	; 0x34
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fb4:	81a3      	strh	r3, [r4, #12]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	6063      	str	r3, [r4, #4]
 8004fba:	6923      	ldr	r3, [r4, #16]
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	f043 0308 	orr.w	r3, r3, #8
 8004fc4:	81a3      	strh	r3, [r4, #12]
 8004fc6:	6923      	ldr	r3, [r4, #16]
 8004fc8:	b94b      	cbnz	r3, 8004fde <__swsetup_r+0x9a>
 8004fca:	89a3      	ldrh	r3, [r4, #12]
 8004fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd4:	d003      	beq.n	8004fde <__swsetup_r+0x9a>
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f000 fa31 	bl	8005440 <__smakebuf_r>
 8004fde:	89a0      	ldrh	r0, [r4, #12]
 8004fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fe4:	f010 0301 	ands.w	r3, r0, #1
 8004fe8:	d00a      	beq.n	8005000 <__swsetup_r+0xbc>
 8004fea:	2300      	movs	r3, #0
 8004fec:	60a3      	str	r3, [r4, #8]
 8004fee:	6963      	ldr	r3, [r4, #20]
 8004ff0:	425b      	negs	r3, r3
 8004ff2:	61a3      	str	r3, [r4, #24]
 8004ff4:	6923      	ldr	r3, [r4, #16]
 8004ff6:	b943      	cbnz	r3, 800500a <__swsetup_r+0xc6>
 8004ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ffc:	d1ba      	bne.n	8004f74 <__swsetup_r+0x30>
 8004ffe:	bd70      	pop	{r4, r5, r6, pc}
 8005000:	0781      	lsls	r1, r0, #30
 8005002:	bf58      	it	pl
 8005004:	6963      	ldrpl	r3, [r4, #20]
 8005006:	60a3      	str	r3, [r4, #8]
 8005008:	e7f4      	b.n	8004ff4 <__swsetup_r+0xb0>
 800500a:	2000      	movs	r0, #0
 800500c:	e7f7      	b.n	8004ffe <__swsetup_r+0xba>
 800500e:	bf00      	nop
 8005010:	2000000c 	.word	0x2000000c
 8005014:	08006654 	.word	0x08006654
 8005018:	08006674 	.word	0x08006674
 800501c:	08006634 	.word	0x08006634

08005020 <__assert_func>:
 8005020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005022:	4614      	mov	r4, r2
 8005024:	461a      	mov	r2, r3
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <__assert_func+0x2c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4605      	mov	r5, r0
 800502c:	68d8      	ldr	r0, [r3, #12]
 800502e:	b14c      	cbz	r4, 8005044 <__assert_func+0x24>
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <__assert_func+0x30>)
 8005032:	9100      	str	r1, [sp, #0]
 8005034:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005038:	4906      	ldr	r1, [pc, #24]	; (8005054 <__assert_func+0x34>)
 800503a:	462b      	mov	r3, r5
 800503c:	f000 f9a6 	bl	800538c <fiprintf>
 8005040:	f000 ffd6 	bl	8005ff0 <abort>
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <__assert_func+0x38>)
 8005046:	461c      	mov	r4, r3
 8005048:	e7f3      	b.n	8005032 <__assert_func+0x12>
 800504a:	bf00      	nop
 800504c:	2000000c 	.word	0x2000000c
 8005050:	080064f4 	.word	0x080064f4
 8005054:	08006501 	.word	0x08006501
 8005058:	0800652f 	.word	0x0800652f

0800505c <__sflush_r>:
 800505c:	898a      	ldrh	r2, [r1, #12]
 800505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	4605      	mov	r5, r0
 8005064:	0710      	lsls	r0, r2, #28
 8005066:	460c      	mov	r4, r1
 8005068:	d458      	bmi.n	800511c <__sflush_r+0xc0>
 800506a:	684b      	ldr	r3, [r1, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	dc05      	bgt.n	800507c <__sflush_r+0x20>
 8005070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	dc02      	bgt.n	800507c <__sflush_r+0x20>
 8005076:	2000      	movs	r0, #0
 8005078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800507c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800507e:	2e00      	cmp	r6, #0
 8005080:	d0f9      	beq.n	8005076 <__sflush_r+0x1a>
 8005082:	2300      	movs	r3, #0
 8005084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005088:	682f      	ldr	r7, [r5, #0]
 800508a:	602b      	str	r3, [r5, #0]
 800508c:	d032      	beq.n	80050f4 <__sflush_r+0x98>
 800508e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	075a      	lsls	r2, r3, #29
 8005094:	d505      	bpl.n	80050a2 <__sflush_r+0x46>
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	1ac0      	subs	r0, r0, r3
 800509a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800509c:	b10b      	cbz	r3, 80050a2 <__sflush_r+0x46>
 800509e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050a0:	1ac0      	subs	r0, r0, r3
 80050a2:	2300      	movs	r3, #0
 80050a4:	4602      	mov	r2, r0
 80050a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050a8:	6a21      	ldr	r1, [r4, #32]
 80050aa:	4628      	mov	r0, r5
 80050ac:	47b0      	blx	r6
 80050ae:	1c43      	adds	r3, r0, #1
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	d106      	bne.n	80050c2 <__sflush_r+0x66>
 80050b4:	6829      	ldr	r1, [r5, #0]
 80050b6:	291d      	cmp	r1, #29
 80050b8:	d82c      	bhi.n	8005114 <__sflush_r+0xb8>
 80050ba:	4a2a      	ldr	r2, [pc, #168]	; (8005164 <__sflush_r+0x108>)
 80050bc:	40ca      	lsrs	r2, r1
 80050be:	07d6      	lsls	r6, r2, #31
 80050c0:	d528      	bpl.n	8005114 <__sflush_r+0xb8>
 80050c2:	2200      	movs	r2, #0
 80050c4:	6062      	str	r2, [r4, #4]
 80050c6:	04d9      	lsls	r1, r3, #19
 80050c8:	6922      	ldr	r2, [r4, #16]
 80050ca:	6022      	str	r2, [r4, #0]
 80050cc:	d504      	bpl.n	80050d8 <__sflush_r+0x7c>
 80050ce:	1c42      	adds	r2, r0, #1
 80050d0:	d101      	bne.n	80050d6 <__sflush_r+0x7a>
 80050d2:	682b      	ldr	r3, [r5, #0]
 80050d4:	b903      	cbnz	r3, 80050d8 <__sflush_r+0x7c>
 80050d6:	6560      	str	r0, [r4, #84]	; 0x54
 80050d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050da:	602f      	str	r7, [r5, #0]
 80050dc:	2900      	cmp	r1, #0
 80050de:	d0ca      	beq.n	8005076 <__sflush_r+0x1a>
 80050e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050e4:	4299      	cmp	r1, r3
 80050e6:	d002      	beq.n	80050ee <__sflush_r+0x92>
 80050e8:	4628      	mov	r0, r5
 80050ea:	f000 f9f1 	bl	80054d0 <_free_r>
 80050ee:	2000      	movs	r0, #0
 80050f0:	6360      	str	r0, [r4, #52]	; 0x34
 80050f2:	e7c1      	b.n	8005078 <__sflush_r+0x1c>
 80050f4:	6a21      	ldr	r1, [r4, #32]
 80050f6:	2301      	movs	r3, #1
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b0      	blx	r6
 80050fc:	1c41      	adds	r1, r0, #1
 80050fe:	d1c7      	bne.n	8005090 <__sflush_r+0x34>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0c4      	beq.n	8005090 <__sflush_r+0x34>
 8005106:	2b1d      	cmp	r3, #29
 8005108:	d001      	beq.n	800510e <__sflush_r+0xb2>
 800510a:	2b16      	cmp	r3, #22
 800510c:	d101      	bne.n	8005112 <__sflush_r+0xb6>
 800510e:	602f      	str	r7, [r5, #0]
 8005110:	e7b1      	b.n	8005076 <__sflush_r+0x1a>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	e7ad      	b.n	8005078 <__sflush_r+0x1c>
 800511c:	690f      	ldr	r7, [r1, #16]
 800511e:	2f00      	cmp	r7, #0
 8005120:	d0a9      	beq.n	8005076 <__sflush_r+0x1a>
 8005122:	0793      	lsls	r3, r2, #30
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	bf08      	it	eq
 8005128:	694b      	ldreq	r3, [r1, #20]
 800512a:	600f      	str	r7, [r1, #0]
 800512c:	bf18      	it	ne
 800512e:	2300      	movne	r3, #0
 8005130:	eba6 0807 	sub.w	r8, r6, r7
 8005134:	608b      	str	r3, [r1, #8]
 8005136:	f1b8 0f00 	cmp.w	r8, #0
 800513a:	dd9c      	ble.n	8005076 <__sflush_r+0x1a>
 800513c:	6a21      	ldr	r1, [r4, #32]
 800513e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005140:	4643      	mov	r3, r8
 8005142:	463a      	mov	r2, r7
 8005144:	4628      	mov	r0, r5
 8005146:	47b0      	blx	r6
 8005148:	2800      	cmp	r0, #0
 800514a:	dc06      	bgt.n	800515a <__sflush_r+0xfe>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	e78e      	b.n	8005078 <__sflush_r+0x1c>
 800515a:	4407      	add	r7, r0
 800515c:	eba8 0800 	sub.w	r8, r8, r0
 8005160:	e7e9      	b.n	8005136 <__sflush_r+0xda>
 8005162:	bf00      	nop
 8005164:	20400001 	.word	0x20400001

08005168 <_fflush_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	690b      	ldr	r3, [r1, #16]
 800516c:	4605      	mov	r5, r0
 800516e:	460c      	mov	r4, r1
 8005170:	b913      	cbnz	r3, 8005178 <_fflush_r+0x10>
 8005172:	2500      	movs	r5, #0
 8005174:	4628      	mov	r0, r5
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	b118      	cbz	r0, 8005182 <_fflush_r+0x1a>
 800517a:	6983      	ldr	r3, [r0, #24]
 800517c:	b90b      	cbnz	r3, 8005182 <_fflush_r+0x1a>
 800517e:	f000 f887 	bl	8005290 <__sinit>
 8005182:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <_fflush_r+0x6c>)
 8005184:	429c      	cmp	r4, r3
 8005186:	d11b      	bne.n	80051c0 <_fflush_r+0x58>
 8005188:	686c      	ldr	r4, [r5, #4]
 800518a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0ef      	beq.n	8005172 <_fflush_r+0xa>
 8005192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005194:	07d0      	lsls	r0, r2, #31
 8005196:	d404      	bmi.n	80051a2 <_fflush_r+0x3a>
 8005198:	0599      	lsls	r1, r3, #22
 800519a:	d402      	bmi.n	80051a2 <_fflush_r+0x3a>
 800519c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800519e:	f000 f927 	bl	80053f0 <__retarget_lock_acquire_recursive>
 80051a2:	4628      	mov	r0, r5
 80051a4:	4621      	mov	r1, r4
 80051a6:	f7ff ff59 	bl	800505c <__sflush_r>
 80051aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051ac:	07da      	lsls	r2, r3, #31
 80051ae:	4605      	mov	r5, r0
 80051b0:	d4e0      	bmi.n	8005174 <_fflush_r+0xc>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	059b      	lsls	r3, r3, #22
 80051b6:	d4dd      	bmi.n	8005174 <_fflush_r+0xc>
 80051b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ba:	f000 f91a 	bl	80053f2 <__retarget_lock_release_recursive>
 80051be:	e7d9      	b.n	8005174 <_fflush_r+0xc>
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <_fflush_r+0x70>)
 80051c2:	429c      	cmp	r4, r3
 80051c4:	d101      	bne.n	80051ca <_fflush_r+0x62>
 80051c6:	68ac      	ldr	r4, [r5, #8]
 80051c8:	e7df      	b.n	800518a <_fflush_r+0x22>
 80051ca:	4b04      	ldr	r3, [pc, #16]	; (80051dc <_fflush_r+0x74>)
 80051cc:	429c      	cmp	r4, r3
 80051ce:	bf08      	it	eq
 80051d0:	68ec      	ldreq	r4, [r5, #12]
 80051d2:	e7da      	b.n	800518a <_fflush_r+0x22>
 80051d4:	08006654 	.word	0x08006654
 80051d8:	08006674 	.word	0x08006674
 80051dc:	08006634 	.word	0x08006634

080051e0 <std>:
 80051e0:	2300      	movs	r3, #0
 80051e2:	b510      	push	{r4, lr}
 80051e4:	4604      	mov	r4, r0
 80051e6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ee:	6083      	str	r3, [r0, #8]
 80051f0:	8181      	strh	r1, [r0, #12]
 80051f2:	6643      	str	r3, [r0, #100]	; 0x64
 80051f4:	81c2      	strh	r2, [r0, #14]
 80051f6:	6183      	str	r3, [r0, #24]
 80051f8:	4619      	mov	r1, r3
 80051fa:	2208      	movs	r2, #8
 80051fc:	305c      	adds	r0, #92	; 0x5c
 80051fe:	f7ff fc95 	bl	8004b2c <memset>
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <std+0x38>)
 8005204:	6263      	str	r3, [r4, #36]	; 0x24
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <std+0x3c>)
 8005208:	62a3      	str	r3, [r4, #40]	; 0x28
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <std+0x40>)
 800520c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <std+0x44>)
 8005210:	6224      	str	r4, [r4, #32]
 8005212:	6323      	str	r3, [r4, #48]	; 0x30
 8005214:	bd10      	pop	{r4, pc}
 8005216:	bf00      	nop
 8005218:	08005f45 	.word	0x08005f45
 800521c:	08005f67 	.word	0x08005f67
 8005220:	08005f9f 	.word	0x08005f9f
 8005224:	08005fc3 	.word	0x08005fc3

08005228 <_cleanup_r>:
 8005228:	4901      	ldr	r1, [pc, #4]	; (8005230 <_cleanup_r+0x8>)
 800522a:	f000 b8c1 	b.w	80053b0 <_fwalk_reent>
 800522e:	bf00      	nop
 8005230:	08005169 	.word	0x08005169

08005234 <__sfmoreglue>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	2268      	movs	r2, #104	; 0x68
 8005238:	1e4d      	subs	r5, r1, #1
 800523a:	4355      	muls	r5, r2
 800523c:	460e      	mov	r6, r1
 800523e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005242:	f000 f9b1 	bl	80055a8 <_malloc_r>
 8005246:	4604      	mov	r4, r0
 8005248:	b140      	cbz	r0, 800525c <__sfmoreglue+0x28>
 800524a:	2100      	movs	r1, #0
 800524c:	e9c0 1600 	strd	r1, r6, [r0]
 8005250:	300c      	adds	r0, #12
 8005252:	60a0      	str	r0, [r4, #8]
 8005254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005258:	f7ff fc68 	bl	8004b2c <memset>
 800525c:	4620      	mov	r0, r4
 800525e:	bd70      	pop	{r4, r5, r6, pc}

08005260 <__sfp_lock_acquire>:
 8005260:	4801      	ldr	r0, [pc, #4]	; (8005268 <__sfp_lock_acquire+0x8>)
 8005262:	f000 b8c5 	b.w	80053f0 <__retarget_lock_acquire_recursive>
 8005266:	bf00      	nop
 8005268:	2000045d 	.word	0x2000045d

0800526c <__sfp_lock_release>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__sfp_lock_release+0x8>)
 800526e:	f000 b8c0 	b.w	80053f2 <__retarget_lock_release_recursive>
 8005272:	bf00      	nop
 8005274:	2000045d 	.word	0x2000045d

08005278 <__sinit_lock_acquire>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__sinit_lock_acquire+0x8>)
 800527a:	f000 b8b9 	b.w	80053f0 <__retarget_lock_acquire_recursive>
 800527e:	bf00      	nop
 8005280:	2000045e 	.word	0x2000045e

08005284 <__sinit_lock_release>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__sinit_lock_release+0x8>)
 8005286:	f000 b8b4 	b.w	80053f2 <__retarget_lock_release_recursive>
 800528a:	bf00      	nop
 800528c:	2000045e 	.word	0x2000045e

08005290 <__sinit>:
 8005290:	b510      	push	{r4, lr}
 8005292:	4604      	mov	r4, r0
 8005294:	f7ff fff0 	bl	8005278 <__sinit_lock_acquire>
 8005298:	69a3      	ldr	r3, [r4, #24]
 800529a:	b11b      	cbz	r3, 80052a4 <__sinit+0x14>
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f7ff bff0 	b.w	8005284 <__sinit_lock_release>
 80052a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052a8:	6523      	str	r3, [r4, #80]	; 0x50
 80052aa:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <__sinit+0x68>)
 80052ac:	4a13      	ldr	r2, [pc, #76]	; (80052fc <__sinit+0x6c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80052b2:	42a3      	cmp	r3, r4
 80052b4:	bf04      	itt	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	61a3      	streq	r3, [r4, #24]
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 f820 	bl	8005300 <__sfp>
 80052c0:	6060      	str	r0, [r4, #4]
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 f81c 	bl	8005300 <__sfp>
 80052c8:	60a0      	str	r0, [r4, #8]
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 f818 	bl	8005300 <__sfp>
 80052d0:	2200      	movs	r2, #0
 80052d2:	60e0      	str	r0, [r4, #12]
 80052d4:	2104      	movs	r1, #4
 80052d6:	6860      	ldr	r0, [r4, #4]
 80052d8:	f7ff ff82 	bl	80051e0 <std>
 80052dc:	68a0      	ldr	r0, [r4, #8]
 80052de:	2201      	movs	r2, #1
 80052e0:	2109      	movs	r1, #9
 80052e2:	f7ff ff7d 	bl	80051e0 <std>
 80052e6:	68e0      	ldr	r0, [r4, #12]
 80052e8:	2202      	movs	r2, #2
 80052ea:	2112      	movs	r1, #18
 80052ec:	f7ff ff78 	bl	80051e0 <std>
 80052f0:	2301      	movs	r3, #1
 80052f2:	61a3      	str	r3, [r4, #24]
 80052f4:	e7d2      	b.n	800529c <__sinit+0xc>
 80052f6:	bf00      	nop
 80052f8:	0800647c 	.word	0x0800647c
 80052fc:	08005229 	.word	0x08005229

08005300 <__sfp>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	4607      	mov	r7, r0
 8005304:	f7ff ffac 	bl	8005260 <__sfp_lock_acquire>
 8005308:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <__sfp+0x84>)
 800530a:	681e      	ldr	r6, [r3, #0]
 800530c:	69b3      	ldr	r3, [r6, #24]
 800530e:	b913      	cbnz	r3, 8005316 <__sfp+0x16>
 8005310:	4630      	mov	r0, r6
 8005312:	f7ff ffbd 	bl	8005290 <__sinit>
 8005316:	3648      	adds	r6, #72	; 0x48
 8005318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800531c:	3b01      	subs	r3, #1
 800531e:	d503      	bpl.n	8005328 <__sfp+0x28>
 8005320:	6833      	ldr	r3, [r6, #0]
 8005322:	b30b      	cbz	r3, 8005368 <__sfp+0x68>
 8005324:	6836      	ldr	r6, [r6, #0]
 8005326:	e7f7      	b.n	8005318 <__sfp+0x18>
 8005328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800532c:	b9d5      	cbnz	r5, 8005364 <__sfp+0x64>
 800532e:	4b16      	ldr	r3, [pc, #88]	; (8005388 <__sfp+0x88>)
 8005330:	60e3      	str	r3, [r4, #12]
 8005332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005336:	6665      	str	r5, [r4, #100]	; 0x64
 8005338:	f000 f859 	bl	80053ee <__retarget_lock_init_recursive>
 800533c:	f7ff ff96 	bl	800526c <__sfp_lock_release>
 8005340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005348:	6025      	str	r5, [r4, #0]
 800534a:	61a5      	str	r5, [r4, #24]
 800534c:	2208      	movs	r2, #8
 800534e:	4629      	mov	r1, r5
 8005350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005354:	f7ff fbea 	bl	8004b2c <memset>
 8005358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800535c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005360:	4620      	mov	r0, r4
 8005362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005364:	3468      	adds	r4, #104	; 0x68
 8005366:	e7d9      	b.n	800531c <__sfp+0x1c>
 8005368:	2104      	movs	r1, #4
 800536a:	4638      	mov	r0, r7
 800536c:	f7ff ff62 	bl	8005234 <__sfmoreglue>
 8005370:	4604      	mov	r4, r0
 8005372:	6030      	str	r0, [r6, #0]
 8005374:	2800      	cmp	r0, #0
 8005376:	d1d5      	bne.n	8005324 <__sfp+0x24>
 8005378:	f7ff ff78 	bl	800526c <__sfp_lock_release>
 800537c:	230c      	movs	r3, #12
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	e7ee      	b.n	8005360 <__sfp+0x60>
 8005382:	bf00      	nop
 8005384:	0800647c 	.word	0x0800647c
 8005388:	ffff0001 	.word	0xffff0001

0800538c <fiprintf>:
 800538c:	b40e      	push	{r1, r2, r3}
 800538e:	b503      	push	{r0, r1, lr}
 8005390:	4601      	mov	r1, r0
 8005392:	ab03      	add	r3, sp, #12
 8005394:	4805      	ldr	r0, [pc, #20]	; (80053ac <fiprintf+0x20>)
 8005396:	f853 2b04 	ldr.w	r2, [r3], #4
 800539a:	6800      	ldr	r0, [r0, #0]
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	f000 fafd 	bl	800599c <_vfiprintf_r>
 80053a2:	b002      	add	sp, #8
 80053a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053a8:	b003      	add	sp, #12
 80053aa:	4770      	bx	lr
 80053ac:	2000000c 	.word	0x2000000c

080053b0 <_fwalk_reent>:
 80053b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b4:	4606      	mov	r6, r0
 80053b6:	4688      	mov	r8, r1
 80053b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053bc:	2700      	movs	r7, #0
 80053be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053c2:	f1b9 0901 	subs.w	r9, r9, #1
 80053c6:	d505      	bpl.n	80053d4 <_fwalk_reent+0x24>
 80053c8:	6824      	ldr	r4, [r4, #0]
 80053ca:	2c00      	cmp	r4, #0
 80053cc:	d1f7      	bne.n	80053be <_fwalk_reent+0xe>
 80053ce:	4638      	mov	r0, r7
 80053d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053d4:	89ab      	ldrh	r3, [r5, #12]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d907      	bls.n	80053ea <_fwalk_reent+0x3a>
 80053da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053de:	3301      	adds	r3, #1
 80053e0:	d003      	beq.n	80053ea <_fwalk_reent+0x3a>
 80053e2:	4629      	mov	r1, r5
 80053e4:	4630      	mov	r0, r6
 80053e6:	47c0      	blx	r8
 80053e8:	4307      	orrs	r7, r0
 80053ea:	3568      	adds	r5, #104	; 0x68
 80053ec:	e7e9      	b.n	80053c2 <_fwalk_reent+0x12>

080053ee <__retarget_lock_init_recursive>:
 80053ee:	4770      	bx	lr

080053f0 <__retarget_lock_acquire_recursive>:
 80053f0:	4770      	bx	lr

080053f2 <__retarget_lock_release_recursive>:
 80053f2:	4770      	bx	lr

080053f4 <__swhatbuf_r>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	460e      	mov	r6, r1
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	2900      	cmp	r1, #0
 80053fe:	b096      	sub	sp, #88	; 0x58
 8005400:	4614      	mov	r4, r2
 8005402:	461d      	mov	r5, r3
 8005404:	da08      	bge.n	8005418 <__swhatbuf_r+0x24>
 8005406:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	602a      	str	r2, [r5, #0]
 800540e:	061a      	lsls	r2, r3, #24
 8005410:	d410      	bmi.n	8005434 <__swhatbuf_r+0x40>
 8005412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005416:	e00e      	b.n	8005436 <__swhatbuf_r+0x42>
 8005418:	466a      	mov	r2, sp
 800541a:	f000 fe01 	bl	8006020 <_fstat_r>
 800541e:	2800      	cmp	r0, #0
 8005420:	dbf1      	blt.n	8005406 <__swhatbuf_r+0x12>
 8005422:	9a01      	ldr	r2, [sp, #4]
 8005424:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005428:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800542c:	425a      	negs	r2, r3
 800542e:	415a      	adcs	r2, r3
 8005430:	602a      	str	r2, [r5, #0]
 8005432:	e7ee      	b.n	8005412 <__swhatbuf_r+0x1e>
 8005434:	2340      	movs	r3, #64	; 0x40
 8005436:	2000      	movs	r0, #0
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	b016      	add	sp, #88	; 0x58
 800543c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005440 <__smakebuf_r>:
 8005440:	898b      	ldrh	r3, [r1, #12]
 8005442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005444:	079d      	lsls	r5, r3, #30
 8005446:	4606      	mov	r6, r0
 8005448:	460c      	mov	r4, r1
 800544a:	d507      	bpl.n	800545c <__smakebuf_r+0x1c>
 800544c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	6123      	str	r3, [r4, #16]
 8005454:	2301      	movs	r3, #1
 8005456:	6163      	str	r3, [r4, #20]
 8005458:	b002      	add	sp, #8
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	ab01      	add	r3, sp, #4
 800545e:	466a      	mov	r2, sp
 8005460:	f7ff ffc8 	bl	80053f4 <__swhatbuf_r>
 8005464:	9900      	ldr	r1, [sp, #0]
 8005466:	4605      	mov	r5, r0
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f89d 	bl	80055a8 <_malloc_r>
 800546e:	b948      	cbnz	r0, 8005484 <__smakebuf_r+0x44>
 8005470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005474:	059a      	lsls	r2, r3, #22
 8005476:	d4ef      	bmi.n	8005458 <__smakebuf_r+0x18>
 8005478:	f023 0303 	bic.w	r3, r3, #3
 800547c:	f043 0302 	orr.w	r3, r3, #2
 8005480:	81a3      	strh	r3, [r4, #12]
 8005482:	e7e3      	b.n	800544c <__smakebuf_r+0xc>
 8005484:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <__smakebuf_r+0x7c>)
 8005486:	62b3      	str	r3, [r6, #40]	; 0x28
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	6020      	str	r0, [r4, #0]
 800548c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005490:	81a3      	strh	r3, [r4, #12]
 8005492:	9b00      	ldr	r3, [sp, #0]
 8005494:	6163      	str	r3, [r4, #20]
 8005496:	9b01      	ldr	r3, [sp, #4]
 8005498:	6120      	str	r0, [r4, #16]
 800549a:	b15b      	cbz	r3, 80054b4 <__smakebuf_r+0x74>
 800549c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054a0:	4630      	mov	r0, r6
 80054a2:	f000 fdcf 	bl	8006044 <_isatty_r>
 80054a6:	b128      	cbz	r0, 80054b4 <__smakebuf_r+0x74>
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	89a0      	ldrh	r0, [r4, #12]
 80054b6:	4305      	orrs	r5, r0
 80054b8:	81a5      	strh	r5, [r4, #12]
 80054ba:	e7cd      	b.n	8005458 <__smakebuf_r+0x18>
 80054bc:	08005229 	.word	0x08005229

080054c0 <malloc>:
 80054c0:	4b02      	ldr	r3, [pc, #8]	; (80054cc <malloc+0xc>)
 80054c2:	4601      	mov	r1, r0
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	f000 b86f 	b.w	80055a8 <_malloc_r>
 80054ca:	bf00      	nop
 80054cc:	2000000c 	.word	0x2000000c

080054d0 <_free_r>:
 80054d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054d2:	2900      	cmp	r1, #0
 80054d4:	d044      	beq.n	8005560 <_free_r+0x90>
 80054d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054da:	9001      	str	r0, [sp, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f1a1 0404 	sub.w	r4, r1, #4
 80054e2:	bfb8      	it	lt
 80054e4:	18e4      	addlt	r4, r4, r3
 80054e6:	f000 fdf7 	bl	80060d8 <__malloc_lock>
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <_free_r+0x94>)
 80054ec:	9801      	ldr	r0, [sp, #4]
 80054ee:	6813      	ldr	r3, [r2, #0]
 80054f0:	b933      	cbnz	r3, 8005500 <_free_r+0x30>
 80054f2:	6063      	str	r3, [r4, #4]
 80054f4:	6014      	str	r4, [r2, #0]
 80054f6:	b003      	add	sp, #12
 80054f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054fc:	f000 bdf2 	b.w	80060e4 <__malloc_unlock>
 8005500:	42a3      	cmp	r3, r4
 8005502:	d908      	bls.n	8005516 <_free_r+0x46>
 8005504:	6825      	ldr	r5, [r4, #0]
 8005506:	1961      	adds	r1, r4, r5
 8005508:	428b      	cmp	r3, r1
 800550a:	bf01      	itttt	eq
 800550c:	6819      	ldreq	r1, [r3, #0]
 800550e:	685b      	ldreq	r3, [r3, #4]
 8005510:	1949      	addeq	r1, r1, r5
 8005512:	6021      	streq	r1, [r4, #0]
 8005514:	e7ed      	b.n	80054f2 <_free_r+0x22>
 8005516:	461a      	mov	r2, r3
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b10b      	cbz	r3, 8005520 <_free_r+0x50>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d9fa      	bls.n	8005516 <_free_r+0x46>
 8005520:	6811      	ldr	r1, [r2, #0]
 8005522:	1855      	adds	r5, r2, r1
 8005524:	42a5      	cmp	r5, r4
 8005526:	d10b      	bne.n	8005540 <_free_r+0x70>
 8005528:	6824      	ldr	r4, [r4, #0]
 800552a:	4421      	add	r1, r4
 800552c:	1854      	adds	r4, r2, r1
 800552e:	42a3      	cmp	r3, r4
 8005530:	6011      	str	r1, [r2, #0]
 8005532:	d1e0      	bne.n	80054f6 <_free_r+0x26>
 8005534:	681c      	ldr	r4, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	6053      	str	r3, [r2, #4]
 800553a:	4421      	add	r1, r4
 800553c:	6011      	str	r1, [r2, #0]
 800553e:	e7da      	b.n	80054f6 <_free_r+0x26>
 8005540:	d902      	bls.n	8005548 <_free_r+0x78>
 8005542:	230c      	movs	r3, #12
 8005544:	6003      	str	r3, [r0, #0]
 8005546:	e7d6      	b.n	80054f6 <_free_r+0x26>
 8005548:	6825      	ldr	r5, [r4, #0]
 800554a:	1961      	adds	r1, r4, r5
 800554c:	428b      	cmp	r3, r1
 800554e:	bf04      	itt	eq
 8005550:	6819      	ldreq	r1, [r3, #0]
 8005552:	685b      	ldreq	r3, [r3, #4]
 8005554:	6063      	str	r3, [r4, #4]
 8005556:	bf04      	itt	eq
 8005558:	1949      	addeq	r1, r1, r5
 800555a:	6021      	streq	r1, [r4, #0]
 800555c:	6054      	str	r4, [r2, #4]
 800555e:	e7ca      	b.n	80054f6 <_free_r+0x26>
 8005560:	b003      	add	sp, #12
 8005562:	bd30      	pop	{r4, r5, pc}
 8005564:	20000460 	.word	0x20000460

08005568 <sbrk_aligned>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4e0e      	ldr	r6, [pc, #56]	; (80055a4 <sbrk_aligned+0x3c>)
 800556c:	460c      	mov	r4, r1
 800556e:	6831      	ldr	r1, [r6, #0]
 8005570:	4605      	mov	r5, r0
 8005572:	b911      	cbnz	r1, 800557a <sbrk_aligned+0x12>
 8005574:	f000 fcd6 	bl	8005f24 <_sbrk_r>
 8005578:	6030      	str	r0, [r6, #0]
 800557a:	4621      	mov	r1, r4
 800557c:	4628      	mov	r0, r5
 800557e:	f000 fcd1 	bl	8005f24 <_sbrk_r>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	d00a      	beq.n	800559c <sbrk_aligned+0x34>
 8005586:	1cc4      	adds	r4, r0, #3
 8005588:	f024 0403 	bic.w	r4, r4, #3
 800558c:	42a0      	cmp	r0, r4
 800558e:	d007      	beq.n	80055a0 <sbrk_aligned+0x38>
 8005590:	1a21      	subs	r1, r4, r0
 8005592:	4628      	mov	r0, r5
 8005594:	f000 fcc6 	bl	8005f24 <_sbrk_r>
 8005598:	3001      	adds	r0, #1
 800559a:	d101      	bne.n	80055a0 <sbrk_aligned+0x38>
 800559c:	f04f 34ff 	mov.w	r4, #4294967295
 80055a0:	4620      	mov	r0, r4
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	20000464 	.word	0x20000464

080055a8 <_malloc_r>:
 80055a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ac:	1ccd      	adds	r5, r1, #3
 80055ae:	f025 0503 	bic.w	r5, r5, #3
 80055b2:	3508      	adds	r5, #8
 80055b4:	2d0c      	cmp	r5, #12
 80055b6:	bf38      	it	cc
 80055b8:	250c      	movcc	r5, #12
 80055ba:	2d00      	cmp	r5, #0
 80055bc:	4607      	mov	r7, r0
 80055be:	db01      	blt.n	80055c4 <_malloc_r+0x1c>
 80055c0:	42a9      	cmp	r1, r5
 80055c2:	d905      	bls.n	80055d0 <_malloc_r+0x28>
 80055c4:	230c      	movs	r3, #12
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	2600      	movs	r6, #0
 80055ca:	4630      	mov	r0, r6
 80055cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d0:	4e2e      	ldr	r6, [pc, #184]	; (800568c <_malloc_r+0xe4>)
 80055d2:	f000 fd81 	bl	80060d8 <__malloc_lock>
 80055d6:	6833      	ldr	r3, [r6, #0]
 80055d8:	461c      	mov	r4, r3
 80055da:	bb34      	cbnz	r4, 800562a <_malloc_r+0x82>
 80055dc:	4629      	mov	r1, r5
 80055de:	4638      	mov	r0, r7
 80055e0:	f7ff ffc2 	bl	8005568 <sbrk_aligned>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	4604      	mov	r4, r0
 80055e8:	d14d      	bne.n	8005686 <_malloc_r+0xde>
 80055ea:	6834      	ldr	r4, [r6, #0]
 80055ec:	4626      	mov	r6, r4
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	d140      	bne.n	8005674 <_malloc_r+0xcc>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	4631      	mov	r1, r6
 80055f6:	4638      	mov	r0, r7
 80055f8:	eb04 0803 	add.w	r8, r4, r3
 80055fc:	f000 fc92 	bl	8005f24 <_sbrk_r>
 8005600:	4580      	cmp	r8, r0
 8005602:	d13a      	bne.n	800567a <_malloc_r+0xd2>
 8005604:	6821      	ldr	r1, [r4, #0]
 8005606:	3503      	adds	r5, #3
 8005608:	1a6d      	subs	r5, r5, r1
 800560a:	f025 0503 	bic.w	r5, r5, #3
 800560e:	3508      	adds	r5, #8
 8005610:	2d0c      	cmp	r5, #12
 8005612:	bf38      	it	cc
 8005614:	250c      	movcc	r5, #12
 8005616:	4629      	mov	r1, r5
 8005618:	4638      	mov	r0, r7
 800561a:	f7ff ffa5 	bl	8005568 <sbrk_aligned>
 800561e:	3001      	adds	r0, #1
 8005620:	d02b      	beq.n	800567a <_malloc_r+0xd2>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	442b      	add	r3, r5
 8005626:	6023      	str	r3, [r4, #0]
 8005628:	e00e      	b.n	8005648 <_malloc_r+0xa0>
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	1b52      	subs	r2, r2, r5
 800562e:	d41e      	bmi.n	800566e <_malloc_r+0xc6>
 8005630:	2a0b      	cmp	r2, #11
 8005632:	d916      	bls.n	8005662 <_malloc_r+0xba>
 8005634:	1961      	adds	r1, r4, r5
 8005636:	42a3      	cmp	r3, r4
 8005638:	6025      	str	r5, [r4, #0]
 800563a:	bf18      	it	ne
 800563c:	6059      	strne	r1, [r3, #4]
 800563e:	6863      	ldr	r3, [r4, #4]
 8005640:	bf08      	it	eq
 8005642:	6031      	streq	r1, [r6, #0]
 8005644:	5162      	str	r2, [r4, r5]
 8005646:	604b      	str	r3, [r1, #4]
 8005648:	4638      	mov	r0, r7
 800564a:	f104 060b 	add.w	r6, r4, #11
 800564e:	f000 fd49 	bl	80060e4 <__malloc_unlock>
 8005652:	f026 0607 	bic.w	r6, r6, #7
 8005656:	1d23      	adds	r3, r4, #4
 8005658:	1af2      	subs	r2, r6, r3
 800565a:	d0b6      	beq.n	80055ca <_malloc_r+0x22>
 800565c:	1b9b      	subs	r3, r3, r6
 800565e:	50a3      	str	r3, [r4, r2]
 8005660:	e7b3      	b.n	80055ca <_malloc_r+0x22>
 8005662:	6862      	ldr	r2, [r4, #4]
 8005664:	42a3      	cmp	r3, r4
 8005666:	bf0c      	ite	eq
 8005668:	6032      	streq	r2, [r6, #0]
 800566a:	605a      	strne	r2, [r3, #4]
 800566c:	e7ec      	b.n	8005648 <_malloc_r+0xa0>
 800566e:	4623      	mov	r3, r4
 8005670:	6864      	ldr	r4, [r4, #4]
 8005672:	e7b2      	b.n	80055da <_malloc_r+0x32>
 8005674:	4634      	mov	r4, r6
 8005676:	6876      	ldr	r6, [r6, #4]
 8005678:	e7b9      	b.n	80055ee <_malloc_r+0x46>
 800567a:	230c      	movs	r3, #12
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	4638      	mov	r0, r7
 8005680:	f000 fd30 	bl	80060e4 <__malloc_unlock>
 8005684:	e7a1      	b.n	80055ca <_malloc_r+0x22>
 8005686:	6025      	str	r5, [r4, #0]
 8005688:	e7de      	b.n	8005648 <_malloc_r+0xa0>
 800568a:	bf00      	nop
 800568c:	20000460 	.word	0x20000460

08005690 <__ssputs_r>:
 8005690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	688e      	ldr	r6, [r1, #8]
 8005696:	429e      	cmp	r6, r3
 8005698:	4682      	mov	sl, r0
 800569a:	460c      	mov	r4, r1
 800569c:	4690      	mov	r8, r2
 800569e:	461f      	mov	r7, r3
 80056a0:	d838      	bhi.n	8005714 <__ssputs_r+0x84>
 80056a2:	898a      	ldrh	r2, [r1, #12]
 80056a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056a8:	d032      	beq.n	8005710 <__ssputs_r+0x80>
 80056aa:	6825      	ldr	r5, [r4, #0]
 80056ac:	6909      	ldr	r1, [r1, #16]
 80056ae:	eba5 0901 	sub.w	r9, r5, r1
 80056b2:	6965      	ldr	r5, [r4, #20]
 80056b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056bc:	3301      	adds	r3, #1
 80056be:	444b      	add	r3, r9
 80056c0:	106d      	asrs	r5, r5, #1
 80056c2:	429d      	cmp	r5, r3
 80056c4:	bf38      	it	cc
 80056c6:	461d      	movcc	r5, r3
 80056c8:	0553      	lsls	r3, r2, #21
 80056ca:	d531      	bpl.n	8005730 <__ssputs_r+0xa0>
 80056cc:	4629      	mov	r1, r5
 80056ce:	f7ff ff6b 	bl	80055a8 <_malloc_r>
 80056d2:	4606      	mov	r6, r0
 80056d4:	b950      	cbnz	r0, 80056ec <__ssputs_r+0x5c>
 80056d6:	230c      	movs	r3, #12
 80056d8:	f8ca 3000 	str.w	r3, [sl]
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	6921      	ldr	r1, [r4, #16]
 80056ee:	464a      	mov	r2, r9
 80056f0:	f000 fcca 	bl	8006088 <memcpy>
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	6126      	str	r6, [r4, #16]
 8005702:	6165      	str	r5, [r4, #20]
 8005704:	444e      	add	r6, r9
 8005706:	eba5 0509 	sub.w	r5, r5, r9
 800570a:	6026      	str	r6, [r4, #0]
 800570c:	60a5      	str	r5, [r4, #8]
 800570e:	463e      	mov	r6, r7
 8005710:	42be      	cmp	r6, r7
 8005712:	d900      	bls.n	8005716 <__ssputs_r+0x86>
 8005714:	463e      	mov	r6, r7
 8005716:	6820      	ldr	r0, [r4, #0]
 8005718:	4632      	mov	r2, r6
 800571a:	4641      	mov	r1, r8
 800571c:	f000 fcc2 	bl	80060a4 <memmove>
 8005720:	68a3      	ldr	r3, [r4, #8]
 8005722:	1b9b      	subs	r3, r3, r6
 8005724:	60a3      	str	r3, [r4, #8]
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	4433      	add	r3, r6
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	2000      	movs	r0, #0
 800572e:	e7db      	b.n	80056e8 <__ssputs_r+0x58>
 8005730:	462a      	mov	r2, r5
 8005732:	f000 fcdd 	bl	80060f0 <_realloc_r>
 8005736:	4606      	mov	r6, r0
 8005738:	2800      	cmp	r0, #0
 800573a:	d1e1      	bne.n	8005700 <__ssputs_r+0x70>
 800573c:	6921      	ldr	r1, [r4, #16]
 800573e:	4650      	mov	r0, sl
 8005740:	f7ff fec6 	bl	80054d0 <_free_r>
 8005744:	e7c7      	b.n	80056d6 <__ssputs_r+0x46>
	...

08005748 <_svfiprintf_r>:
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	4698      	mov	r8, r3
 800574e:	898b      	ldrh	r3, [r1, #12]
 8005750:	061b      	lsls	r3, r3, #24
 8005752:	b09d      	sub	sp, #116	; 0x74
 8005754:	4607      	mov	r7, r0
 8005756:	460d      	mov	r5, r1
 8005758:	4614      	mov	r4, r2
 800575a:	d50e      	bpl.n	800577a <_svfiprintf_r+0x32>
 800575c:	690b      	ldr	r3, [r1, #16]
 800575e:	b963      	cbnz	r3, 800577a <_svfiprintf_r+0x32>
 8005760:	2140      	movs	r1, #64	; 0x40
 8005762:	f7ff ff21 	bl	80055a8 <_malloc_r>
 8005766:	6028      	str	r0, [r5, #0]
 8005768:	6128      	str	r0, [r5, #16]
 800576a:	b920      	cbnz	r0, 8005776 <_svfiprintf_r+0x2e>
 800576c:	230c      	movs	r3, #12
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	e0d1      	b.n	800591a <_svfiprintf_r+0x1d2>
 8005776:	2340      	movs	r3, #64	; 0x40
 8005778:	616b      	str	r3, [r5, #20]
 800577a:	2300      	movs	r3, #0
 800577c:	9309      	str	r3, [sp, #36]	; 0x24
 800577e:	2320      	movs	r3, #32
 8005780:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005784:	f8cd 800c 	str.w	r8, [sp, #12]
 8005788:	2330      	movs	r3, #48	; 0x30
 800578a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005934 <_svfiprintf_r+0x1ec>
 800578e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005792:	f04f 0901 	mov.w	r9, #1
 8005796:	4623      	mov	r3, r4
 8005798:	469a      	mov	sl, r3
 800579a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800579e:	b10a      	cbz	r2, 80057a4 <_svfiprintf_r+0x5c>
 80057a0:	2a25      	cmp	r2, #37	; 0x25
 80057a2:	d1f9      	bne.n	8005798 <_svfiprintf_r+0x50>
 80057a4:	ebba 0b04 	subs.w	fp, sl, r4
 80057a8:	d00b      	beq.n	80057c2 <_svfiprintf_r+0x7a>
 80057aa:	465b      	mov	r3, fp
 80057ac:	4622      	mov	r2, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	4638      	mov	r0, r7
 80057b2:	f7ff ff6d 	bl	8005690 <__ssputs_r>
 80057b6:	3001      	adds	r0, #1
 80057b8:	f000 80aa 	beq.w	8005910 <_svfiprintf_r+0x1c8>
 80057bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057be:	445a      	add	r2, fp
 80057c0:	9209      	str	r2, [sp, #36]	; 0x24
 80057c2:	f89a 3000 	ldrb.w	r3, [sl]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 80a2 	beq.w	8005910 <_svfiprintf_r+0x1c8>
 80057cc:	2300      	movs	r3, #0
 80057ce:	f04f 32ff 	mov.w	r2, #4294967295
 80057d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057d6:	f10a 0a01 	add.w	sl, sl, #1
 80057da:	9304      	str	r3, [sp, #16]
 80057dc:	9307      	str	r3, [sp, #28]
 80057de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057e2:	931a      	str	r3, [sp, #104]	; 0x68
 80057e4:	4654      	mov	r4, sl
 80057e6:	2205      	movs	r2, #5
 80057e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ec:	4851      	ldr	r0, [pc, #324]	; (8005934 <_svfiprintf_r+0x1ec>)
 80057ee:	f7fa fd17 	bl	8000220 <memchr>
 80057f2:	9a04      	ldr	r2, [sp, #16]
 80057f4:	b9d8      	cbnz	r0, 800582e <_svfiprintf_r+0xe6>
 80057f6:	06d0      	lsls	r0, r2, #27
 80057f8:	bf44      	itt	mi
 80057fa:	2320      	movmi	r3, #32
 80057fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005800:	0711      	lsls	r1, r2, #28
 8005802:	bf44      	itt	mi
 8005804:	232b      	movmi	r3, #43	; 0x2b
 8005806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800580a:	f89a 3000 	ldrb.w	r3, [sl]
 800580e:	2b2a      	cmp	r3, #42	; 0x2a
 8005810:	d015      	beq.n	800583e <_svfiprintf_r+0xf6>
 8005812:	9a07      	ldr	r2, [sp, #28]
 8005814:	4654      	mov	r4, sl
 8005816:	2000      	movs	r0, #0
 8005818:	f04f 0c0a 	mov.w	ip, #10
 800581c:	4621      	mov	r1, r4
 800581e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005822:	3b30      	subs	r3, #48	; 0x30
 8005824:	2b09      	cmp	r3, #9
 8005826:	d94e      	bls.n	80058c6 <_svfiprintf_r+0x17e>
 8005828:	b1b0      	cbz	r0, 8005858 <_svfiprintf_r+0x110>
 800582a:	9207      	str	r2, [sp, #28]
 800582c:	e014      	b.n	8005858 <_svfiprintf_r+0x110>
 800582e:	eba0 0308 	sub.w	r3, r0, r8
 8005832:	fa09 f303 	lsl.w	r3, r9, r3
 8005836:	4313      	orrs	r3, r2
 8005838:	9304      	str	r3, [sp, #16]
 800583a:	46a2      	mov	sl, r4
 800583c:	e7d2      	b.n	80057e4 <_svfiprintf_r+0x9c>
 800583e:	9b03      	ldr	r3, [sp, #12]
 8005840:	1d19      	adds	r1, r3, #4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	9103      	str	r1, [sp, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	bfbb      	ittet	lt
 800584a:	425b      	neglt	r3, r3
 800584c:	f042 0202 	orrlt.w	r2, r2, #2
 8005850:	9307      	strge	r3, [sp, #28]
 8005852:	9307      	strlt	r3, [sp, #28]
 8005854:	bfb8      	it	lt
 8005856:	9204      	strlt	r2, [sp, #16]
 8005858:	7823      	ldrb	r3, [r4, #0]
 800585a:	2b2e      	cmp	r3, #46	; 0x2e
 800585c:	d10c      	bne.n	8005878 <_svfiprintf_r+0x130>
 800585e:	7863      	ldrb	r3, [r4, #1]
 8005860:	2b2a      	cmp	r3, #42	; 0x2a
 8005862:	d135      	bne.n	80058d0 <_svfiprintf_r+0x188>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	1d1a      	adds	r2, r3, #4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	9203      	str	r2, [sp, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	bfb8      	it	lt
 8005870:	f04f 33ff 	movlt.w	r3, #4294967295
 8005874:	3402      	adds	r4, #2
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005944 <_svfiprintf_r+0x1fc>
 800587c:	7821      	ldrb	r1, [r4, #0]
 800587e:	2203      	movs	r2, #3
 8005880:	4650      	mov	r0, sl
 8005882:	f7fa fccd 	bl	8000220 <memchr>
 8005886:	b140      	cbz	r0, 800589a <_svfiprintf_r+0x152>
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	eba0 000a 	sub.w	r0, r0, sl
 800588e:	fa03 f000 	lsl.w	r0, r3, r0
 8005892:	9b04      	ldr	r3, [sp, #16]
 8005894:	4303      	orrs	r3, r0
 8005896:	3401      	adds	r4, #1
 8005898:	9304      	str	r3, [sp, #16]
 800589a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800589e:	4826      	ldr	r0, [pc, #152]	; (8005938 <_svfiprintf_r+0x1f0>)
 80058a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058a4:	2206      	movs	r2, #6
 80058a6:	f7fa fcbb 	bl	8000220 <memchr>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d038      	beq.n	8005920 <_svfiprintf_r+0x1d8>
 80058ae:	4b23      	ldr	r3, [pc, #140]	; (800593c <_svfiprintf_r+0x1f4>)
 80058b0:	bb1b      	cbnz	r3, 80058fa <_svfiprintf_r+0x1b2>
 80058b2:	9b03      	ldr	r3, [sp, #12]
 80058b4:	3307      	adds	r3, #7
 80058b6:	f023 0307 	bic.w	r3, r3, #7
 80058ba:	3308      	adds	r3, #8
 80058bc:	9303      	str	r3, [sp, #12]
 80058be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c0:	4433      	add	r3, r6
 80058c2:	9309      	str	r3, [sp, #36]	; 0x24
 80058c4:	e767      	b.n	8005796 <_svfiprintf_r+0x4e>
 80058c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ca:	460c      	mov	r4, r1
 80058cc:	2001      	movs	r0, #1
 80058ce:	e7a5      	b.n	800581c <_svfiprintf_r+0xd4>
 80058d0:	2300      	movs	r3, #0
 80058d2:	3401      	adds	r4, #1
 80058d4:	9305      	str	r3, [sp, #20]
 80058d6:	4619      	mov	r1, r3
 80058d8:	f04f 0c0a 	mov.w	ip, #10
 80058dc:	4620      	mov	r0, r4
 80058de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058e2:	3a30      	subs	r2, #48	; 0x30
 80058e4:	2a09      	cmp	r2, #9
 80058e6:	d903      	bls.n	80058f0 <_svfiprintf_r+0x1a8>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0c5      	beq.n	8005878 <_svfiprintf_r+0x130>
 80058ec:	9105      	str	r1, [sp, #20]
 80058ee:	e7c3      	b.n	8005878 <_svfiprintf_r+0x130>
 80058f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80058f4:	4604      	mov	r4, r0
 80058f6:	2301      	movs	r3, #1
 80058f8:	e7f0      	b.n	80058dc <_svfiprintf_r+0x194>
 80058fa:	ab03      	add	r3, sp, #12
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	462a      	mov	r2, r5
 8005900:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <_svfiprintf_r+0x1f8>)
 8005902:	a904      	add	r1, sp, #16
 8005904:	4638      	mov	r0, r7
 8005906:	f3af 8000 	nop.w
 800590a:	1c42      	adds	r2, r0, #1
 800590c:	4606      	mov	r6, r0
 800590e:	d1d6      	bne.n	80058be <_svfiprintf_r+0x176>
 8005910:	89ab      	ldrh	r3, [r5, #12]
 8005912:	065b      	lsls	r3, r3, #25
 8005914:	f53f af2c 	bmi.w	8005770 <_svfiprintf_r+0x28>
 8005918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800591a:	b01d      	add	sp, #116	; 0x74
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005920:	ab03      	add	r3, sp, #12
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	462a      	mov	r2, r5
 8005926:	4b06      	ldr	r3, [pc, #24]	; (8005940 <_svfiprintf_r+0x1f8>)
 8005928:	a904      	add	r1, sp, #16
 800592a:	4638      	mov	r0, r7
 800592c:	f000 f9d4 	bl	8005cd8 <_printf_i>
 8005930:	e7eb      	b.n	800590a <_svfiprintf_r+0x1c2>
 8005932:	bf00      	nop
 8005934:	08006694 	.word	0x08006694
 8005938:	0800669e 	.word	0x0800669e
 800593c:	00000000 	.word	0x00000000
 8005940:	08005691 	.word	0x08005691
 8005944:	0800669a 	.word	0x0800669a

08005948 <__sfputc_r>:
 8005948:	6893      	ldr	r3, [r2, #8]
 800594a:	3b01      	subs	r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	b410      	push	{r4}
 8005950:	6093      	str	r3, [r2, #8]
 8005952:	da08      	bge.n	8005966 <__sfputc_r+0x1e>
 8005954:	6994      	ldr	r4, [r2, #24]
 8005956:	42a3      	cmp	r3, r4
 8005958:	db01      	blt.n	800595e <__sfputc_r+0x16>
 800595a:	290a      	cmp	r1, #10
 800595c:	d103      	bne.n	8005966 <__sfputc_r+0x1e>
 800595e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005962:	f7ff ba9d 	b.w	8004ea0 <__swbuf_r>
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	1c58      	adds	r0, r3, #1
 800596a:	6010      	str	r0, [r2, #0]
 800596c:	7019      	strb	r1, [r3, #0]
 800596e:	4608      	mov	r0, r1
 8005970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005974:	4770      	bx	lr

08005976 <__sfputs_r>:
 8005976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005978:	4606      	mov	r6, r0
 800597a:	460f      	mov	r7, r1
 800597c:	4614      	mov	r4, r2
 800597e:	18d5      	adds	r5, r2, r3
 8005980:	42ac      	cmp	r4, r5
 8005982:	d101      	bne.n	8005988 <__sfputs_r+0x12>
 8005984:	2000      	movs	r0, #0
 8005986:	e007      	b.n	8005998 <__sfputs_r+0x22>
 8005988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598c:	463a      	mov	r2, r7
 800598e:	4630      	mov	r0, r6
 8005990:	f7ff ffda 	bl	8005948 <__sfputc_r>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d1f3      	bne.n	8005980 <__sfputs_r+0xa>
 8005998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800599c <_vfiprintf_r>:
 800599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a0:	460d      	mov	r5, r1
 80059a2:	b09d      	sub	sp, #116	; 0x74
 80059a4:	4614      	mov	r4, r2
 80059a6:	4698      	mov	r8, r3
 80059a8:	4606      	mov	r6, r0
 80059aa:	b118      	cbz	r0, 80059b4 <_vfiprintf_r+0x18>
 80059ac:	6983      	ldr	r3, [r0, #24]
 80059ae:	b90b      	cbnz	r3, 80059b4 <_vfiprintf_r+0x18>
 80059b0:	f7ff fc6e 	bl	8005290 <__sinit>
 80059b4:	4b89      	ldr	r3, [pc, #548]	; (8005bdc <_vfiprintf_r+0x240>)
 80059b6:	429d      	cmp	r5, r3
 80059b8:	d11b      	bne.n	80059f2 <_vfiprintf_r+0x56>
 80059ba:	6875      	ldr	r5, [r6, #4]
 80059bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059be:	07d9      	lsls	r1, r3, #31
 80059c0:	d405      	bmi.n	80059ce <_vfiprintf_r+0x32>
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	059a      	lsls	r2, r3, #22
 80059c6:	d402      	bmi.n	80059ce <_vfiprintf_r+0x32>
 80059c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ca:	f7ff fd11 	bl	80053f0 <__retarget_lock_acquire_recursive>
 80059ce:	89ab      	ldrh	r3, [r5, #12]
 80059d0:	071b      	lsls	r3, r3, #28
 80059d2:	d501      	bpl.n	80059d8 <_vfiprintf_r+0x3c>
 80059d4:	692b      	ldr	r3, [r5, #16]
 80059d6:	b9eb      	cbnz	r3, 8005a14 <_vfiprintf_r+0x78>
 80059d8:	4629      	mov	r1, r5
 80059da:	4630      	mov	r0, r6
 80059dc:	f7ff fab2 	bl	8004f44 <__swsetup_r>
 80059e0:	b1c0      	cbz	r0, 8005a14 <_vfiprintf_r+0x78>
 80059e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059e4:	07dc      	lsls	r4, r3, #31
 80059e6:	d50e      	bpl.n	8005a06 <_vfiprintf_r+0x6a>
 80059e8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ec:	b01d      	add	sp, #116	; 0x74
 80059ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f2:	4b7b      	ldr	r3, [pc, #492]	; (8005be0 <_vfiprintf_r+0x244>)
 80059f4:	429d      	cmp	r5, r3
 80059f6:	d101      	bne.n	80059fc <_vfiprintf_r+0x60>
 80059f8:	68b5      	ldr	r5, [r6, #8]
 80059fa:	e7df      	b.n	80059bc <_vfiprintf_r+0x20>
 80059fc:	4b79      	ldr	r3, [pc, #484]	; (8005be4 <_vfiprintf_r+0x248>)
 80059fe:	429d      	cmp	r5, r3
 8005a00:	bf08      	it	eq
 8005a02:	68f5      	ldreq	r5, [r6, #12]
 8005a04:	e7da      	b.n	80059bc <_vfiprintf_r+0x20>
 8005a06:	89ab      	ldrh	r3, [r5, #12]
 8005a08:	0598      	lsls	r0, r3, #22
 8005a0a:	d4ed      	bmi.n	80059e8 <_vfiprintf_r+0x4c>
 8005a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a0e:	f7ff fcf0 	bl	80053f2 <__retarget_lock_release_recursive>
 8005a12:	e7e9      	b.n	80059e8 <_vfiprintf_r+0x4c>
 8005a14:	2300      	movs	r3, #0
 8005a16:	9309      	str	r3, [sp, #36]	; 0x24
 8005a18:	2320      	movs	r3, #32
 8005a1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a22:	2330      	movs	r3, #48	; 0x30
 8005a24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005be8 <_vfiprintf_r+0x24c>
 8005a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a2c:	f04f 0901 	mov.w	r9, #1
 8005a30:	4623      	mov	r3, r4
 8005a32:	469a      	mov	sl, r3
 8005a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a38:	b10a      	cbz	r2, 8005a3e <_vfiprintf_r+0xa2>
 8005a3a:	2a25      	cmp	r2, #37	; 0x25
 8005a3c:	d1f9      	bne.n	8005a32 <_vfiprintf_r+0x96>
 8005a3e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a42:	d00b      	beq.n	8005a5c <_vfiprintf_r+0xc0>
 8005a44:	465b      	mov	r3, fp
 8005a46:	4622      	mov	r2, r4
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff ff93 	bl	8005976 <__sfputs_r>
 8005a50:	3001      	adds	r0, #1
 8005a52:	f000 80aa 	beq.w	8005baa <_vfiprintf_r+0x20e>
 8005a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a58:	445a      	add	r2, fp
 8005a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80a2 	beq.w	8005baa <_vfiprintf_r+0x20e>
 8005a66:	2300      	movs	r3, #0
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a70:	f10a 0a01 	add.w	sl, sl, #1
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a7e:	4654      	mov	r4, sl
 8005a80:	2205      	movs	r2, #5
 8005a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a86:	4858      	ldr	r0, [pc, #352]	; (8005be8 <_vfiprintf_r+0x24c>)
 8005a88:	f7fa fbca 	bl	8000220 <memchr>
 8005a8c:	9a04      	ldr	r2, [sp, #16]
 8005a8e:	b9d8      	cbnz	r0, 8005ac8 <_vfiprintf_r+0x12c>
 8005a90:	06d1      	lsls	r1, r2, #27
 8005a92:	bf44      	itt	mi
 8005a94:	2320      	movmi	r3, #32
 8005a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a9a:	0713      	lsls	r3, r2, #28
 8005a9c:	bf44      	itt	mi
 8005a9e:	232b      	movmi	r3, #43	; 0x2b
 8005aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aaa:	d015      	beq.n	8005ad8 <_vfiprintf_r+0x13c>
 8005aac:	9a07      	ldr	r2, [sp, #28]
 8005aae:	4654      	mov	r4, sl
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	f04f 0c0a 	mov.w	ip, #10
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005abc:	3b30      	subs	r3, #48	; 0x30
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d94e      	bls.n	8005b60 <_vfiprintf_r+0x1c4>
 8005ac2:	b1b0      	cbz	r0, 8005af2 <_vfiprintf_r+0x156>
 8005ac4:	9207      	str	r2, [sp, #28]
 8005ac6:	e014      	b.n	8005af2 <_vfiprintf_r+0x156>
 8005ac8:	eba0 0308 	sub.w	r3, r0, r8
 8005acc:	fa09 f303 	lsl.w	r3, r9, r3
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	46a2      	mov	sl, r4
 8005ad6:	e7d2      	b.n	8005a7e <_vfiprintf_r+0xe2>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	1d19      	adds	r1, r3, #4
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	9103      	str	r1, [sp, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bfbb      	ittet	lt
 8005ae4:	425b      	neglt	r3, r3
 8005ae6:	f042 0202 	orrlt.w	r2, r2, #2
 8005aea:	9307      	strge	r3, [sp, #28]
 8005aec:	9307      	strlt	r3, [sp, #28]
 8005aee:	bfb8      	it	lt
 8005af0:	9204      	strlt	r2, [sp, #16]
 8005af2:	7823      	ldrb	r3, [r4, #0]
 8005af4:	2b2e      	cmp	r3, #46	; 0x2e
 8005af6:	d10c      	bne.n	8005b12 <_vfiprintf_r+0x176>
 8005af8:	7863      	ldrb	r3, [r4, #1]
 8005afa:	2b2a      	cmp	r3, #42	; 0x2a
 8005afc:	d135      	bne.n	8005b6a <_vfiprintf_r+0x1ce>
 8005afe:	9b03      	ldr	r3, [sp, #12]
 8005b00:	1d1a      	adds	r2, r3, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	9203      	str	r2, [sp, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bfb8      	it	lt
 8005b0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b0e:	3402      	adds	r4, #2
 8005b10:	9305      	str	r3, [sp, #20]
 8005b12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005bf8 <_vfiprintf_r+0x25c>
 8005b16:	7821      	ldrb	r1, [r4, #0]
 8005b18:	2203      	movs	r2, #3
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	f7fa fb80 	bl	8000220 <memchr>
 8005b20:	b140      	cbz	r0, 8005b34 <_vfiprintf_r+0x198>
 8005b22:	2340      	movs	r3, #64	; 0x40
 8005b24:	eba0 000a 	sub.w	r0, r0, sl
 8005b28:	fa03 f000 	lsl.w	r0, r3, r0
 8005b2c:	9b04      	ldr	r3, [sp, #16]
 8005b2e:	4303      	orrs	r3, r0
 8005b30:	3401      	adds	r4, #1
 8005b32:	9304      	str	r3, [sp, #16]
 8005b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b38:	482c      	ldr	r0, [pc, #176]	; (8005bec <_vfiprintf_r+0x250>)
 8005b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b3e:	2206      	movs	r2, #6
 8005b40:	f7fa fb6e 	bl	8000220 <memchr>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d03f      	beq.n	8005bc8 <_vfiprintf_r+0x22c>
 8005b48:	4b29      	ldr	r3, [pc, #164]	; (8005bf0 <_vfiprintf_r+0x254>)
 8005b4a:	bb1b      	cbnz	r3, 8005b94 <_vfiprintf_r+0x1f8>
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	3307      	adds	r3, #7
 8005b50:	f023 0307 	bic.w	r3, r3, #7
 8005b54:	3308      	adds	r3, #8
 8005b56:	9303      	str	r3, [sp, #12]
 8005b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5a:	443b      	add	r3, r7
 8005b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5e:	e767      	b.n	8005a30 <_vfiprintf_r+0x94>
 8005b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b64:	460c      	mov	r4, r1
 8005b66:	2001      	movs	r0, #1
 8005b68:	e7a5      	b.n	8005ab6 <_vfiprintf_r+0x11a>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	3401      	adds	r4, #1
 8005b6e:	9305      	str	r3, [sp, #20]
 8005b70:	4619      	mov	r1, r3
 8005b72:	f04f 0c0a 	mov.w	ip, #10
 8005b76:	4620      	mov	r0, r4
 8005b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b7c:	3a30      	subs	r2, #48	; 0x30
 8005b7e:	2a09      	cmp	r2, #9
 8005b80:	d903      	bls.n	8005b8a <_vfiprintf_r+0x1ee>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0c5      	beq.n	8005b12 <_vfiprintf_r+0x176>
 8005b86:	9105      	str	r1, [sp, #20]
 8005b88:	e7c3      	b.n	8005b12 <_vfiprintf_r+0x176>
 8005b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b8e:	4604      	mov	r4, r0
 8005b90:	2301      	movs	r3, #1
 8005b92:	e7f0      	b.n	8005b76 <_vfiprintf_r+0x1da>
 8005b94:	ab03      	add	r3, sp, #12
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	462a      	mov	r2, r5
 8005b9a:	4b16      	ldr	r3, [pc, #88]	; (8005bf4 <_vfiprintf_r+0x258>)
 8005b9c:	a904      	add	r1, sp, #16
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f3af 8000 	nop.w
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	1c78      	adds	r0, r7, #1
 8005ba8:	d1d6      	bne.n	8005b58 <_vfiprintf_r+0x1bc>
 8005baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bac:	07d9      	lsls	r1, r3, #31
 8005bae:	d405      	bmi.n	8005bbc <_vfiprintf_r+0x220>
 8005bb0:	89ab      	ldrh	r3, [r5, #12]
 8005bb2:	059a      	lsls	r2, r3, #22
 8005bb4:	d402      	bmi.n	8005bbc <_vfiprintf_r+0x220>
 8005bb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bb8:	f7ff fc1b 	bl	80053f2 <__retarget_lock_release_recursive>
 8005bbc:	89ab      	ldrh	r3, [r5, #12]
 8005bbe:	065b      	lsls	r3, r3, #25
 8005bc0:	f53f af12 	bmi.w	80059e8 <_vfiprintf_r+0x4c>
 8005bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bc6:	e711      	b.n	80059ec <_vfiprintf_r+0x50>
 8005bc8:	ab03      	add	r3, sp, #12
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <_vfiprintf_r+0x258>)
 8005bd0:	a904      	add	r1, sp, #16
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f000 f880 	bl	8005cd8 <_printf_i>
 8005bd8:	e7e4      	b.n	8005ba4 <_vfiprintf_r+0x208>
 8005bda:	bf00      	nop
 8005bdc:	08006654 	.word	0x08006654
 8005be0:	08006674 	.word	0x08006674
 8005be4:	08006634 	.word	0x08006634
 8005be8:	08006694 	.word	0x08006694
 8005bec:	0800669e 	.word	0x0800669e
 8005bf0:	00000000 	.word	0x00000000
 8005bf4:	08005977 	.word	0x08005977
 8005bf8:	0800669a 	.word	0x0800669a

08005bfc <_printf_common>:
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	4616      	mov	r6, r2
 8005c02:	4699      	mov	r9, r3
 8005c04:	688a      	ldr	r2, [r1, #8]
 8005c06:	690b      	ldr	r3, [r1, #16]
 8005c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	bfb8      	it	lt
 8005c10:	4613      	movlt	r3, r2
 8005c12:	6033      	str	r3, [r6, #0]
 8005c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c18:	4607      	mov	r7, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	b10a      	cbz	r2, 8005c22 <_printf_common+0x26>
 8005c1e:	3301      	adds	r3, #1
 8005c20:	6033      	str	r3, [r6, #0]
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	0699      	lsls	r1, r3, #26
 8005c26:	bf42      	ittt	mi
 8005c28:	6833      	ldrmi	r3, [r6, #0]
 8005c2a:	3302      	addmi	r3, #2
 8005c2c:	6033      	strmi	r3, [r6, #0]
 8005c2e:	6825      	ldr	r5, [r4, #0]
 8005c30:	f015 0506 	ands.w	r5, r5, #6
 8005c34:	d106      	bne.n	8005c44 <_printf_common+0x48>
 8005c36:	f104 0a19 	add.w	sl, r4, #25
 8005c3a:	68e3      	ldr	r3, [r4, #12]
 8005c3c:	6832      	ldr	r2, [r6, #0]
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	42ab      	cmp	r3, r5
 8005c42:	dc26      	bgt.n	8005c92 <_printf_common+0x96>
 8005c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c48:	1e13      	subs	r3, r2, #0
 8005c4a:	6822      	ldr	r2, [r4, #0]
 8005c4c:	bf18      	it	ne
 8005c4e:	2301      	movne	r3, #1
 8005c50:	0692      	lsls	r2, r2, #26
 8005c52:	d42b      	bmi.n	8005cac <_printf_common+0xb0>
 8005c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c58:	4649      	mov	r1, r9
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	47c0      	blx	r8
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d01e      	beq.n	8005ca0 <_printf_common+0xa4>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	68e5      	ldr	r5, [r4, #12]
 8005c66:	6832      	ldr	r2, [r6, #0]
 8005c68:	f003 0306 	and.w	r3, r3, #6
 8005c6c:	2b04      	cmp	r3, #4
 8005c6e:	bf08      	it	eq
 8005c70:	1aad      	subeq	r5, r5, r2
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	6922      	ldr	r2, [r4, #16]
 8005c76:	bf0c      	ite	eq
 8005c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c7c:	2500      	movne	r5, #0
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	bfc4      	itt	gt
 8005c82:	1a9b      	subgt	r3, r3, r2
 8005c84:	18ed      	addgt	r5, r5, r3
 8005c86:	2600      	movs	r6, #0
 8005c88:	341a      	adds	r4, #26
 8005c8a:	42b5      	cmp	r5, r6
 8005c8c:	d11a      	bne.n	8005cc4 <_printf_common+0xc8>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	e008      	b.n	8005ca4 <_printf_common+0xa8>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4652      	mov	r2, sl
 8005c96:	4649      	mov	r1, r9
 8005c98:	4638      	mov	r0, r7
 8005c9a:	47c0      	blx	r8
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d103      	bne.n	8005ca8 <_printf_common+0xac>
 8005ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca8:	3501      	adds	r5, #1
 8005caa:	e7c6      	b.n	8005c3a <_printf_common+0x3e>
 8005cac:	18e1      	adds	r1, r4, r3
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	2030      	movs	r0, #48	; 0x30
 8005cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cb6:	4422      	add	r2, r4
 8005cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cc0:	3302      	adds	r3, #2
 8005cc2:	e7c7      	b.n	8005c54 <_printf_common+0x58>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	4649      	mov	r1, r9
 8005cca:	4638      	mov	r0, r7
 8005ccc:	47c0      	blx	r8
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d0e6      	beq.n	8005ca0 <_printf_common+0xa4>
 8005cd2:	3601      	adds	r6, #1
 8005cd4:	e7d9      	b.n	8005c8a <_printf_common+0x8e>
	...

08005cd8 <_printf_i>:
 8005cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cdc:	7e0f      	ldrb	r7, [r1, #24]
 8005cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ce0:	2f78      	cmp	r7, #120	; 0x78
 8005ce2:	4691      	mov	r9, r2
 8005ce4:	4680      	mov	r8, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	469a      	mov	sl, r3
 8005cea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cee:	d807      	bhi.n	8005d00 <_printf_i+0x28>
 8005cf0:	2f62      	cmp	r7, #98	; 0x62
 8005cf2:	d80a      	bhi.n	8005d0a <_printf_i+0x32>
 8005cf4:	2f00      	cmp	r7, #0
 8005cf6:	f000 80d8 	beq.w	8005eaa <_printf_i+0x1d2>
 8005cfa:	2f58      	cmp	r7, #88	; 0x58
 8005cfc:	f000 80a3 	beq.w	8005e46 <_printf_i+0x16e>
 8005d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d08:	e03a      	b.n	8005d80 <_printf_i+0xa8>
 8005d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d0e:	2b15      	cmp	r3, #21
 8005d10:	d8f6      	bhi.n	8005d00 <_printf_i+0x28>
 8005d12:	a101      	add	r1, pc, #4	; (adr r1, 8005d18 <_printf_i+0x40>)
 8005d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d18:	08005d71 	.word	0x08005d71
 8005d1c:	08005d85 	.word	0x08005d85
 8005d20:	08005d01 	.word	0x08005d01
 8005d24:	08005d01 	.word	0x08005d01
 8005d28:	08005d01 	.word	0x08005d01
 8005d2c:	08005d01 	.word	0x08005d01
 8005d30:	08005d85 	.word	0x08005d85
 8005d34:	08005d01 	.word	0x08005d01
 8005d38:	08005d01 	.word	0x08005d01
 8005d3c:	08005d01 	.word	0x08005d01
 8005d40:	08005d01 	.word	0x08005d01
 8005d44:	08005e91 	.word	0x08005e91
 8005d48:	08005db5 	.word	0x08005db5
 8005d4c:	08005e73 	.word	0x08005e73
 8005d50:	08005d01 	.word	0x08005d01
 8005d54:	08005d01 	.word	0x08005d01
 8005d58:	08005eb3 	.word	0x08005eb3
 8005d5c:	08005d01 	.word	0x08005d01
 8005d60:	08005db5 	.word	0x08005db5
 8005d64:	08005d01 	.word	0x08005d01
 8005d68:	08005d01 	.word	0x08005d01
 8005d6c:	08005e7b 	.word	0x08005e7b
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	1d1a      	adds	r2, r3, #4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	602a      	str	r2, [r5, #0]
 8005d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0a3      	b.n	8005ecc <_printf_i+0x1f4>
 8005d84:	6820      	ldr	r0, [r4, #0]
 8005d86:	6829      	ldr	r1, [r5, #0]
 8005d88:	0606      	lsls	r6, r0, #24
 8005d8a:	f101 0304 	add.w	r3, r1, #4
 8005d8e:	d50a      	bpl.n	8005da6 <_printf_i+0xce>
 8005d90:	680e      	ldr	r6, [r1, #0]
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	2e00      	cmp	r6, #0
 8005d96:	da03      	bge.n	8005da0 <_printf_i+0xc8>
 8005d98:	232d      	movs	r3, #45	; 0x2d
 8005d9a:	4276      	negs	r6, r6
 8005d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da0:	485e      	ldr	r0, [pc, #376]	; (8005f1c <_printf_i+0x244>)
 8005da2:	230a      	movs	r3, #10
 8005da4:	e019      	b.n	8005dda <_printf_i+0x102>
 8005da6:	680e      	ldr	r6, [r1, #0]
 8005da8:	602b      	str	r3, [r5, #0]
 8005daa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dae:	bf18      	it	ne
 8005db0:	b236      	sxthne	r6, r6
 8005db2:	e7ef      	b.n	8005d94 <_printf_i+0xbc>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	6820      	ldr	r0, [r4, #0]
 8005db8:	1d19      	adds	r1, r3, #4
 8005dba:	6029      	str	r1, [r5, #0]
 8005dbc:	0601      	lsls	r1, r0, #24
 8005dbe:	d501      	bpl.n	8005dc4 <_printf_i+0xec>
 8005dc0:	681e      	ldr	r6, [r3, #0]
 8005dc2:	e002      	b.n	8005dca <_printf_i+0xf2>
 8005dc4:	0646      	lsls	r6, r0, #25
 8005dc6:	d5fb      	bpl.n	8005dc0 <_printf_i+0xe8>
 8005dc8:	881e      	ldrh	r6, [r3, #0]
 8005dca:	4854      	ldr	r0, [pc, #336]	; (8005f1c <_printf_i+0x244>)
 8005dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8005dce:	bf0c      	ite	eq
 8005dd0:	2308      	moveq	r3, #8
 8005dd2:	230a      	movne	r3, #10
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dda:	6865      	ldr	r5, [r4, #4]
 8005ddc:	60a5      	str	r5, [r4, #8]
 8005dde:	2d00      	cmp	r5, #0
 8005de0:	bfa2      	ittt	ge
 8005de2:	6821      	ldrge	r1, [r4, #0]
 8005de4:	f021 0104 	bicge.w	r1, r1, #4
 8005de8:	6021      	strge	r1, [r4, #0]
 8005dea:	b90e      	cbnz	r6, 8005df0 <_printf_i+0x118>
 8005dec:	2d00      	cmp	r5, #0
 8005dee:	d04d      	beq.n	8005e8c <_printf_i+0x1b4>
 8005df0:	4615      	mov	r5, r2
 8005df2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005df6:	fb03 6711 	mls	r7, r3, r1, r6
 8005dfa:	5dc7      	ldrb	r7, [r0, r7]
 8005dfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e00:	4637      	mov	r7, r6
 8005e02:	42bb      	cmp	r3, r7
 8005e04:	460e      	mov	r6, r1
 8005e06:	d9f4      	bls.n	8005df2 <_printf_i+0x11a>
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d10b      	bne.n	8005e24 <_printf_i+0x14c>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	07de      	lsls	r6, r3, #31
 8005e10:	d508      	bpl.n	8005e24 <_printf_i+0x14c>
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	6861      	ldr	r1, [r4, #4]
 8005e16:	4299      	cmp	r1, r3
 8005e18:	bfde      	ittt	le
 8005e1a:	2330      	movle	r3, #48	; 0x30
 8005e1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e24:	1b52      	subs	r2, r2, r5
 8005e26:	6122      	str	r2, [r4, #16]
 8005e28:	f8cd a000 	str.w	sl, [sp]
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	aa03      	add	r2, sp, #12
 8005e30:	4621      	mov	r1, r4
 8005e32:	4640      	mov	r0, r8
 8005e34:	f7ff fee2 	bl	8005bfc <_printf_common>
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d14c      	bne.n	8005ed6 <_printf_i+0x1fe>
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e40:	b004      	add	sp, #16
 8005e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e46:	4835      	ldr	r0, [pc, #212]	; (8005f1c <_printf_i+0x244>)
 8005e48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e4c:	6829      	ldr	r1, [r5, #0]
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e54:	6029      	str	r1, [r5, #0]
 8005e56:	061d      	lsls	r5, r3, #24
 8005e58:	d514      	bpl.n	8005e84 <_printf_i+0x1ac>
 8005e5a:	07df      	lsls	r7, r3, #31
 8005e5c:	bf44      	itt	mi
 8005e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e62:	6023      	strmi	r3, [r4, #0]
 8005e64:	b91e      	cbnz	r6, 8005e6e <_printf_i+0x196>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	f023 0320 	bic.w	r3, r3, #32
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	2310      	movs	r3, #16
 8005e70:	e7b0      	b.n	8005dd4 <_printf_i+0xfc>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	f043 0320 	orr.w	r3, r3, #32
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	2378      	movs	r3, #120	; 0x78
 8005e7c:	4828      	ldr	r0, [pc, #160]	; (8005f20 <_printf_i+0x248>)
 8005e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e82:	e7e3      	b.n	8005e4c <_printf_i+0x174>
 8005e84:	0659      	lsls	r1, r3, #25
 8005e86:	bf48      	it	mi
 8005e88:	b2b6      	uxthmi	r6, r6
 8005e8a:	e7e6      	b.n	8005e5a <_printf_i+0x182>
 8005e8c:	4615      	mov	r5, r2
 8005e8e:	e7bb      	b.n	8005e08 <_printf_i+0x130>
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	6826      	ldr	r6, [r4, #0]
 8005e94:	6961      	ldr	r1, [r4, #20]
 8005e96:	1d18      	adds	r0, r3, #4
 8005e98:	6028      	str	r0, [r5, #0]
 8005e9a:	0635      	lsls	r5, r6, #24
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	d501      	bpl.n	8005ea4 <_printf_i+0x1cc>
 8005ea0:	6019      	str	r1, [r3, #0]
 8005ea2:	e002      	b.n	8005eaa <_printf_i+0x1d2>
 8005ea4:	0670      	lsls	r0, r6, #25
 8005ea6:	d5fb      	bpl.n	8005ea0 <_printf_i+0x1c8>
 8005ea8:	8019      	strh	r1, [r3, #0]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	4615      	mov	r5, r2
 8005eb0:	e7ba      	b.n	8005e28 <_printf_i+0x150>
 8005eb2:	682b      	ldr	r3, [r5, #0]
 8005eb4:	1d1a      	adds	r2, r3, #4
 8005eb6:	602a      	str	r2, [r5, #0]
 8005eb8:	681d      	ldr	r5, [r3, #0]
 8005eba:	6862      	ldr	r2, [r4, #4]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f7fa f9ae 	bl	8000220 <memchr>
 8005ec4:	b108      	cbz	r0, 8005eca <_printf_i+0x1f2>
 8005ec6:	1b40      	subs	r0, r0, r5
 8005ec8:	6060      	str	r0, [r4, #4]
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	6123      	str	r3, [r4, #16]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ed4:	e7a8      	b.n	8005e28 <_printf_i+0x150>
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	462a      	mov	r2, r5
 8005eda:	4649      	mov	r1, r9
 8005edc:	4640      	mov	r0, r8
 8005ede:	47d0      	blx	sl
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d0ab      	beq.n	8005e3c <_printf_i+0x164>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	079b      	lsls	r3, r3, #30
 8005ee8:	d413      	bmi.n	8005f12 <_printf_i+0x23a>
 8005eea:	68e0      	ldr	r0, [r4, #12]
 8005eec:	9b03      	ldr	r3, [sp, #12]
 8005eee:	4298      	cmp	r0, r3
 8005ef0:	bfb8      	it	lt
 8005ef2:	4618      	movlt	r0, r3
 8005ef4:	e7a4      	b.n	8005e40 <_printf_i+0x168>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4632      	mov	r2, r6
 8005efa:	4649      	mov	r1, r9
 8005efc:	4640      	mov	r0, r8
 8005efe:	47d0      	blx	sl
 8005f00:	3001      	adds	r0, #1
 8005f02:	d09b      	beq.n	8005e3c <_printf_i+0x164>
 8005f04:	3501      	adds	r5, #1
 8005f06:	68e3      	ldr	r3, [r4, #12]
 8005f08:	9903      	ldr	r1, [sp, #12]
 8005f0a:	1a5b      	subs	r3, r3, r1
 8005f0c:	42ab      	cmp	r3, r5
 8005f0e:	dcf2      	bgt.n	8005ef6 <_printf_i+0x21e>
 8005f10:	e7eb      	b.n	8005eea <_printf_i+0x212>
 8005f12:	2500      	movs	r5, #0
 8005f14:	f104 0619 	add.w	r6, r4, #25
 8005f18:	e7f5      	b.n	8005f06 <_printf_i+0x22e>
 8005f1a:	bf00      	nop
 8005f1c:	080066a5 	.word	0x080066a5
 8005f20:	080066b6 	.word	0x080066b6

08005f24 <_sbrk_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d06      	ldr	r5, [pc, #24]	; (8005f40 <_sbrk_r+0x1c>)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	602b      	str	r3, [r5, #0]
 8005f30:	f7fa ff2a 	bl	8000d88 <_sbrk>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d102      	bne.n	8005f3e <_sbrk_r+0x1a>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	b103      	cbz	r3, 8005f3e <_sbrk_r+0x1a>
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	20000468 	.word	0x20000468

08005f44 <__sread>:
 8005f44:	b510      	push	{r4, lr}
 8005f46:	460c      	mov	r4, r1
 8005f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4c:	f000 f900 	bl	8006150 <_read_r>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	bfab      	itete	ge
 8005f54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f56:	89a3      	ldrhlt	r3, [r4, #12]
 8005f58:	181b      	addge	r3, r3, r0
 8005f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f5e:	bfac      	ite	ge
 8005f60:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f62:	81a3      	strhlt	r3, [r4, #12]
 8005f64:	bd10      	pop	{r4, pc}

08005f66 <__swrite>:
 8005f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6a:	461f      	mov	r7, r3
 8005f6c:	898b      	ldrh	r3, [r1, #12]
 8005f6e:	05db      	lsls	r3, r3, #23
 8005f70:	4605      	mov	r5, r0
 8005f72:	460c      	mov	r4, r1
 8005f74:	4616      	mov	r6, r2
 8005f76:	d505      	bpl.n	8005f84 <__swrite+0x1e>
 8005f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f000 f870 	bl	8006064 <_lseek_r>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	4632      	mov	r2, r6
 8005f92:	463b      	mov	r3, r7
 8005f94:	4628      	mov	r0, r5
 8005f96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9a:	f000 b817 	b.w	8005fcc <_write_r>

08005f9e <__sseek>:
 8005f9e:	b510      	push	{r4, lr}
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa6:	f000 f85d 	bl	8006064 <_lseek_r>
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	bf15      	itete	ne
 8005fb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fba:	81a3      	strheq	r3, [r4, #12]
 8005fbc:	bf18      	it	ne
 8005fbe:	81a3      	strhne	r3, [r4, #12]
 8005fc0:	bd10      	pop	{r4, pc}

08005fc2 <__sclose>:
 8005fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc6:	f000 b81b 	b.w	8006000 <_close_r>
	...

08005fcc <_write_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	; (8005fec <_write_r+0x20>)
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7fa fe83 	bl	8000ce6 <_write>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_write_r+0x1e>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_write_r+0x1e>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20000468 	.word	0x20000468

08005ff0 <abort>:
 8005ff0:	b508      	push	{r3, lr}
 8005ff2:	2006      	movs	r0, #6
 8005ff4:	f000 f8e6 	bl	80061c4 <raise>
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	f7fa fe4d 	bl	8000c98 <_exit>
	...

08006000 <_close_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4d06      	ldr	r5, [pc, #24]	; (800601c <_close_r+0x1c>)
 8006004:	2300      	movs	r3, #0
 8006006:	4604      	mov	r4, r0
 8006008:	4608      	mov	r0, r1
 800600a:	602b      	str	r3, [r5, #0]
 800600c:	f7fa fe87 	bl	8000d1e <_close>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d102      	bne.n	800601a <_close_r+0x1a>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b103      	cbz	r3, 800601a <_close_r+0x1a>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	20000468 	.word	0x20000468

08006020 <_fstat_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d07      	ldr	r5, [pc, #28]	; (8006040 <_fstat_r+0x20>)
 8006024:	2300      	movs	r3, #0
 8006026:	4604      	mov	r4, r0
 8006028:	4608      	mov	r0, r1
 800602a:	4611      	mov	r1, r2
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	f7fa fe82 	bl	8000d36 <_fstat>
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	d102      	bne.n	800603c <_fstat_r+0x1c>
 8006036:	682b      	ldr	r3, [r5, #0]
 8006038:	b103      	cbz	r3, 800603c <_fstat_r+0x1c>
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	bd38      	pop	{r3, r4, r5, pc}
 800603e:	bf00      	nop
 8006040:	20000468 	.word	0x20000468

08006044 <_isatty_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4d06      	ldr	r5, [pc, #24]	; (8006060 <_isatty_r+0x1c>)
 8006048:	2300      	movs	r3, #0
 800604a:	4604      	mov	r4, r0
 800604c:	4608      	mov	r0, r1
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	f7fa fe81 	bl	8000d56 <_isatty>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_isatty_r+0x1a>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_isatty_r+0x1a>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	20000468 	.word	0x20000468

08006064 <_lseek_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d07      	ldr	r5, [pc, #28]	; (8006084 <_lseek_r+0x20>)
 8006068:	4604      	mov	r4, r0
 800606a:	4608      	mov	r0, r1
 800606c:	4611      	mov	r1, r2
 800606e:	2200      	movs	r2, #0
 8006070:	602a      	str	r2, [r5, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	f7fa fe7a 	bl	8000d6c <_lseek>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_lseek_r+0x1e>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_lseek_r+0x1e>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	20000468 	.word	0x20000468

08006088 <memcpy>:
 8006088:	440a      	add	r2, r1
 800608a:	4291      	cmp	r1, r2
 800608c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006090:	d100      	bne.n	8006094 <memcpy+0xc>
 8006092:	4770      	bx	lr
 8006094:	b510      	push	{r4, lr}
 8006096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800609a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800609e:	4291      	cmp	r1, r2
 80060a0:	d1f9      	bne.n	8006096 <memcpy+0xe>
 80060a2:	bd10      	pop	{r4, pc}

080060a4 <memmove>:
 80060a4:	4288      	cmp	r0, r1
 80060a6:	b510      	push	{r4, lr}
 80060a8:	eb01 0402 	add.w	r4, r1, r2
 80060ac:	d902      	bls.n	80060b4 <memmove+0x10>
 80060ae:	4284      	cmp	r4, r0
 80060b0:	4623      	mov	r3, r4
 80060b2:	d807      	bhi.n	80060c4 <memmove+0x20>
 80060b4:	1e43      	subs	r3, r0, #1
 80060b6:	42a1      	cmp	r1, r4
 80060b8:	d008      	beq.n	80060cc <memmove+0x28>
 80060ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060c2:	e7f8      	b.n	80060b6 <memmove+0x12>
 80060c4:	4402      	add	r2, r0
 80060c6:	4601      	mov	r1, r0
 80060c8:	428a      	cmp	r2, r1
 80060ca:	d100      	bne.n	80060ce <memmove+0x2a>
 80060cc:	bd10      	pop	{r4, pc}
 80060ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060d6:	e7f7      	b.n	80060c8 <memmove+0x24>

080060d8 <__malloc_lock>:
 80060d8:	4801      	ldr	r0, [pc, #4]	; (80060e0 <__malloc_lock+0x8>)
 80060da:	f7ff b989 	b.w	80053f0 <__retarget_lock_acquire_recursive>
 80060de:	bf00      	nop
 80060e0:	2000045c 	.word	0x2000045c

080060e4 <__malloc_unlock>:
 80060e4:	4801      	ldr	r0, [pc, #4]	; (80060ec <__malloc_unlock+0x8>)
 80060e6:	f7ff b984 	b.w	80053f2 <__retarget_lock_release_recursive>
 80060ea:	bf00      	nop
 80060ec:	2000045c 	.word	0x2000045c

080060f0 <_realloc_r>:
 80060f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060f4:	4680      	mov	r8, r0
 80060f6:	4614      	mov	r4, r2
 80060f8:	460e      	mov	r6, r1
 80060fa:	b921      	cbnz	r1, 8006106 <_realloc_r+0x16>
 80060fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006100:	4611      	mov	r1, r2
 8006102:	f7ff ba51 	b.w	80055a8 <_malloc_r>
 8006106:	b92a      	cbnz	r2, 8006114 <_realloc_r+0x24>
 8006108:	f7ff f9e2 	bl	80054d0 <_free_r>
 800610c:	4625      	mov	r5, r4
 800610e:	4628      	mov	r0, r5
 8006110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006114:	f000 f872 	bl	80061fc <_malloc_usable_size_r>
 8006118:	4284      	cmp	r4, r0
 800611a:	4607      	mov	r7, r0
 800611c:	d802      	bhi.n	8006124 <_realloc_r+0x34>
 800611e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006122:	d812      	bhi.n	800614a <_realloc_r+0x5a>
 8006124:	4621      	mov	r1, r4
 8006126:	4640      	mov	r0, r8
 8006128:	f7ff fa3e 	bl	80055a8 <_malloc_r>
 800612c:	4605      	mov	r5, r0
 800612e:	2800      	cmp	r0, #0
 8006130:	d0ed      	beq.n	800610e <_realloc_r+0x1e>
 8006132:	42bc      	cmp	r4, r7
 8006134:	4622      	mov	r2, r4
 8006136:	4631      	mov	r1, r6
 8006138:	bf28      	it	cs
 800613a:	463a      	movcs	r2, r7
 800613c:	f7ff ffa4 	bl	8006088 <memcpy>
 8006140:	4631      	mov	r1, r6
 8006142:	4640      	mov	r0, r8
 8006144:	f7ff f9c4 	bl	80054d0 <_free_r>
 8006148:	e7e1      	b.n	800610e <_realloc_r+0x1e>
 800614a:	4635      	mov	r5, r6
 800614c:	e7df      	b.n	800610e <_realloc_r+0x1e>
	...

08006150 <_read_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d07      	ldr	r5, [pc, #28]	; (8006170 <_read_r+0x20>)
 8006154:	4604      	mov	r4, r0
 8006156:	4608      	mov	r0, r1
 8006158:	4611      	mov	r1, r2
 800615a:	2200      	movs	r2, #0
 800615c:	602a      	str	r2, [r5, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	f7fa fda4 	bl	8000cac <_read>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_read_r+0x1e>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_read_r+0x1e>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	20000468 	.word	0x20000468

08006174 <_raise_r>:
 8006174:	291f      	cmp	r1, #31
 8006176:	b538      	push	{r3, r4, r5, lr}
 8006178:	4604      	mov	r4, r0
 800617a:	460d      	mov	r5, r1
 800617c:	d904      	bls.n	8006188 <_raise_r+0x14>
 800617e:	2316      	movs	r3, #22
 8006180:	6003      	str	r3, [r0, #0]
 8006182:	f04f 30ff 	mov.w	r0, #4294967295
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800618a:	b112      	cbz	r2, 8006192 <_raise_r+0x1e>
 800618c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006190:	b94b      	cbnz	r3, 80061a6 <_raise_r+0x32>
 8006192:	4620      	mov	r0, r4
 8006194:	f000 f830 	bl	80061f8 <_getpid_r>
 8006198:	462a      	mov	r2, r5
 800619a:	4601      	mov	r1, r0
 800619c:	4620      	mov	r0, r4
 800619e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a2:	f000 b817 	b.w	80061d4 <_kill_r>
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d00a      	beq.n	80061c0 <_raise_r+0x4c>
 80061aa:	1c59      	adds	r1, r3, #1
 80061ac:	d103      	bne.n	80061b6 <_raise_r+0x42>
 80061ae:	2316      	movs	r3, #22
 80061b0:	6003      	str	r3, [r0, #0]
 80061b2:	2001      	movs	r0, #1
 80061b4:	e7e7      	b.n	8006186 <_raise_r+0x12>
 80061b6:	2400      	movs	r4, #0
 80061b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80061bc:	4628      	mov	r0, r5
 80061be:	4798      	blx	r3
 80061c0:	2000      	movs	r0, #0
 80061c2:	e7e0      	b.n	8006186 <_raise_r+0x12>

080061c4 <raise>:
 80061c4:	4b02      	ldr	r3, [pc, #8]	; (80061d0 <raise+0xc>)
 80061c6:	4601      	mov	r1, r0
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	f7ff bfd3 	b.w	8006174 <_raise_r>
 80061ce:	bf00      	nop
 80061d0:	2000000c 	.word	0x2000000c

080061d4 <_kill_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4d07      	ldr	r5, [pc, #28]	; (80061f4 <_kill_r+0x20>)
 80061d8:	2300      	movs	r3, #0
 80061da:	4604      	mov	r4, r0
 80061dc:	4608      	mov	r0, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	602b      	str	r3, [r5, #0]
 80061e2:	f7fa fd49 	bl	8000c78 <_kill>
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	d102      	bne.n	80061f0 <_kill_r+0x1c>
 80061ea:	682b      	ldr	r3, [r5, #0]
 80061ec:	b103      	cbz	r3, 80061f0 <_kill_r+0x1c>
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	bd38      	pop	{r3, r4, r5, pc}
 80061f2:	bf00      	nop
 80061f4:	20000468 	.word	0x20000468

080061f8 <_getpid_r>:
 80061f8:	f7fa bd36 	b.w	8000c68 <_getpid>

080061fc <_malloc_usable_size_r>:
 80061fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006200:	1f18      	subs	r0, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	bfbc      	itt	lt
 8006206:	580b      	ldrlt	r3, [r1, r0]
 8006208:	18c0      	addlt	r0, r0, r3
 800620a:	4770      	bx	lr

0800620c <_init>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	bf00      	nop
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr

08006218 <_fini>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr
